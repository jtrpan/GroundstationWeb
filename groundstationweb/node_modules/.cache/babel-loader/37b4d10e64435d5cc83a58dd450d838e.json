{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\DropArea\\\\components\\\\Dropper.jsx\";\nimport React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\"; // eslint-disable-next-line no-unused-vars\n\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\n\nclass Dropper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false\n    };\n\n    this.receivedData = data => {\n      console.info(\"received:\", data);\n      this.props.receiveData(data);\n    };\n\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({\n          connected: true\n        });\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receivedData(e.data);\n      };\n\n      connection.onclose = () => {\n        this.setState({\n          connected: false\n        });\n        console.info(\"Disconnected from server\");\n      };\n\n      this.connection = connection;\n    };\n\n    this.sendData = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending:\", data);\n      this.connection.send(data);\n    };\n\n    this.connect();\n  }\n\n  render() {\n    const connected = this.state.connected;\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h5\",\n      style: {\n        marginBottom: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Aircraft Status:\"), React.createElement(\"div\", {\n      style: {\n        color: \"grey\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Payload Release:\\xA0\", connected ? React.createElement(\"strong\", {\n      style: {\n        color: \"limegreen\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Ready\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      style: {\n        color: \"firebrick\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Not Ready\"), \"\\xA0\", React.createElement(Icon, {\n      link: true,\n      name: \"sync\",\n      onClick: this.connect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Button, {\n      icon: \"wifi\",\n      content: \"Ping Aircraft\",\n      fluid: true,\n      basic: true,\n      onClick: this.sendData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Dropper;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/DropArea/components/Dropper.jsx"],"names":["React","Component","Segment","Header","Icon","Button","localServer","remoteServer","server","Dropper","constructor","props","state","connected","receivedData","data","console","info","receiveData","connect","connection","WebSocket","onopen","setState","onerror","error","onmessage","e","onclose","sendData","warn","JSON","stringify","type","flightData","latitude","Math","random","longitude","altitude","velocity","headwind","send","render","marginBottom","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\n\n// eslint-disable-next-line no-unused-vars\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\nconst server = remoteServer;\n\nclass Dropper extends Component {\n  constructor(props) {\n    super(props);\n    this.connect();\n  }\n\n  state = {\n    connected: false,\n  };\n\n  receivedData = (data) => {\n    console.info(\"received:\", data);\n    this.props.receiveData(data);\n  };\n\n  connect = () => {\n    console.info(\"Connecting....\");\n    const connection = new WebSocket(server);\n    connection.onopen = () => {\n      this.setState({ connected: true });\n      console.info(\"Connected to server\");\n    };\n    connection.onerror = (error) => {\n      console.info(\"Connection error\", error);\n    };\n    connection.onmessage = (e) => {\n      this.receivedData(e.data);\n    };\n    connection.onclose = () => {\n      this.setState({ connected: false });\n      console.info(\"Disconnected from server\");\n    };\n    this.connection = connection;\n  };\n\n  sendData = () => {\n    const { connected } = this.state;\n    if (!connected) {\n      console.warn(\"Cannot send. Not connected\");\n      return;\n    }\n    const data = JSON.stringify(\n      {\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063+Math.random()*0.00111,\n          longitude: -123.195911+Math.random()*0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9,\n        },\n      },\n    );\n    console.info(\"Sending:\", data);\n    this.connection.send(data);\n  };\n\n  render() {\n    const { connected } = this.state;\n    return (\n      <Segment>\n        <Header as=\"h5\" style={{ marginBottom: \"0px\" }}>Aircraft Status:</Header>\n        <div style={{ color: \"grey\" }}>\n            Payload Release:&nbsp;\n          {connected ? (\n            <strong style={{ color: \"limegreen\" }}>Ready</strong>\n          ): (\n            <span>\n              <strong style={{ color: \"firebrick\" }}>Not Ready</strong>\n                  &nbsp;\n              <Icon link name=\"sync\" onClick={this.connect} />\n            </span>\n\n          )}\n          <Button icon=\"wifi\" content=\"Ping Aircraft\" fluid basic onClick={this.sendData} />\n        </div>\n      </Segment>\n    );\n  }\n}\n\nexport default Dropper;\n"]},"metadata":{},"sourceType":"module"}