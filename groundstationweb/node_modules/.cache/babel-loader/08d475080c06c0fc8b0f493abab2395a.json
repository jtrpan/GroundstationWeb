{"ast":null,"code":"// eslint-disable-next-line no-unused-vars\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\n\nclass WebSocketManager {\n  constructor(setData) {\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      this.connection = new WebSocket(server);\n\n      this.connection.onopen = () => {\n        this.connected = true;\n        console.info(\"Connected to server\");\n      };\n\n      this.connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        this.connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      this.connection.onmessage = e => {\n        this.receiveData(e.data);\n      };\n\n      this.connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n        this.connected = false;\n      };\n    };\n\n    this.receiveData = rawData => {\n      this.setData(rawData);\n    };\n\n    this.testData = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    this.ping = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"command\",\n        command: {// ping\n        }\n      });\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n    this.release = identity => {\n      if (!this.connected) {\n        console.warn(\"Cannot drop. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"command\",\n        command: {\n          // drop details\n          object: identity\n        }\n      });\n      console.info(\"Sending drop signal:\", message);\n      this.connection.send(message);\n    };\n\n    this.setData = setData;\n    this.connect();\n    this.connected = false;\n  }\n  /*\n    check = () => {\n      const { this.connection } = this.state;\n      if (!connection || this.connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n\n\n}\n\nexport default WebSocketManager;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/helpers/WebSocketManager.js"],"names":["localServer","remoteServer","server","WebSocketManager","constructor","setData","connect","console","info","connection","WebSocket","onopen","connected","onerror","error","message","close","onmessage","e","receiveData","data","onclose","rawData","testData","warn","JSON","stringify","type","flightData","latitude","Math","random","longitude","altitude","velocity","headwind","send","ping","command","release","identity","object"],"mappings":"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","sourcesContent":["// eslint-disable-next-line no-unused-vars\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\nconst server = remoteServer;\n\nclass WebSocketManager {\n  constructor(setData) {\n    this.setData = setData;\n    this.connect();\n    this.connected = false;\n  }\n\n    connect = () => {\n      console.info(\"Connecting....\");\n      this.connection = new WebSocket(server);\n\n      this.connection.onopen = () => {\n        this.connected = true;\n        console.info(\"Connected to server\");\n      };\n\n      this.connection.onerror = (error) => {\n        console.error(\n          \"Socket encountered error: \",\n          error.message,\n          \"Closing socket\",\n        );\n        this.connection.close();\n        console.info(\"Connection error\", error);\n      };\n      this.connection.onmessage = (e) => {\n        this.receiveData(e.data);\n      };\n      this.connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n        this.connected = false;\n      };\n    };\n\n  receiveData = (rawData) => {\n    this.setData(rawData);\n  };\n\n    testData = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n      const data = JSON.stringify(\n        {\n          type: \"data\",\n          flightData: {\n            latitude: 49.258063+Math.random()*0.00111,\n            longitude: -123.195911+Math.random()*0.00111,\n            altitude: 45.3,\n            velocity: 10.3,\n            headwind: -0.9,\n          },\n        },\n      );\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    ping = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n      const message = JSON.stringify(\n        {\n          type: \"command\",\n          command: {\n            // ping\n          },\n        },\n      );\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n  release = (identity) => {\n    if (!this.connected) {\n      console.warn(\"Cannot drop. Not connected\");\n      return;\n    }\n    const message = JSON.stringify(\n      {\n        type: \"command\",\n        command: {\n          // drop details\n          object: identity,\n        },\n      },\n    );\n    console.info(\"Sending drop signal:\", message);\n    this.connection.send(message);\n  };\n\n  /*\n    check = () => {\n      const { this.connection } = this.state;\n      if (!connection || this.connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n}\nexport default WebSocketManager;\n"]},"metadata":{},"sourceType":"module"}