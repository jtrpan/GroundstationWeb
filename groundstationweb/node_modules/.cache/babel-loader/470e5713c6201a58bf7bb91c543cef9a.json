{"ast":null,"code":"import React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\n\nclass WebSocketManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false\n    };\n\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({\n          connected: true\n        });\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receivedData(e.data);\n      };\n\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n    this.receivedData = data => {\n      console.info(\"received:\", data);\n      this.props.receiveData(data);\n    };\n\n    this.sendData = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending:\", data);\n      this.connection.send(data);\n    };\n\n    this.ping = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending:\", message);\n      this.connection.send(message);\n    };\n\n    this.connect();\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n  render() {}\n\n}\n\nexport default WebSocketManager;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/helpers/WebSocketManager.jsx"],"names":["React","Component","Segment","Header","Icon","Button","localServer","remoteServer","server","WebSocketManager","constructor","props","state","connected","connect","console","info","connection","WebSocket","onopen","setState","onerror","error","message","close","onmessage","e","receivedData","data","onclose","receiveData","sendData","warn","JSON","stringify","type","flightData","latitude","Math","random","longitude","altitude","velocity","headwind","send","ping","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\n\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\nconst server = remoteServer;\n\nclass WebSocketManager extends Component {\n  constructor(props) {\n    super(props);\n    this.connect();\n  }\n\n    state = {\n      connected: false,\n    };\n\n    componentDidMount() {\n      this.connect();\n    }\n\n    connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({ connected: true });\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = (error) => {\n        console.error(\n          \"Socket encountered error: \",\n          error.message,\n          \"Closing socket\",\n        );\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n      connection.onmessage = (e) => {\n        this.receivedData(e.data);\n      };\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n    receivedData = (data) => {\n      console.info(\"received:\", data);\n      this.props.receiveData(data);\n    };\n\n    sendData = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n      const data = JSON.stringify(\n        {\n          type: \"data\",\n          flightData: {\n            latitude: 49.258063+Math.random()*0.00111,\n            longitude: -123.195911+Math.random()*0.00111,\n            altitude: 45.3,\n            velocity: 10.3,\n            headwind: -0.9,\n          },\n        },\n      );\n      console.info(\"Sending:\", data);\n      this.connection.send(data);\n    };\n\n    ping = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n      const message = JSON.stringify(\n        {\n          type: \"action\",\n          flightData: {\n            latitude: 49.258063+Math.random()*0.00111,\n            longitude: -123.195911+Math.random()*0.00111,\n            altitude: 45.3,\n            velocity: 10.3,\n            headwind: -0.9,\n          },\n        },\n      );\n      console.info(\"Sending:\", message);\n      this.connection.send(message);\n    };\n\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n\n  render() {\n\n  }\n}\nexport default WebSocketManager;\n"]},"metadata":{},"sourceType":"module"}