{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\GroundStation\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport { predictPayload, predictCDA } from \"../../helpers/predictions\";\nimport { predictLoc } from \"../../helpers/location\";\nimport { getDirection } from \"../../helpers/direction\";\n\nclass GroundStation extends Component {\n  constructor(props) {\n    super(props);\n    this.dataLog = [];\n    this.planePositionHistory = [];\n    this.state = {\n      currentData: {}\n    };\n    this.lastPacketTime = 0;\n    this.timeout = 250;\n\n    this.receivedData = data => {\n      console.info(\"received:\", data);\n      this.receiveData(data);\n    };\n\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const localServer = \"ws://localhost:8888\";\n      const remoteServer = \"ws://104.248.73.89:8888\";\n      const server = remoteServer;\n      const connection = new WebSocket(server);\n      this.connection = connection;\n      const that = this; // cache the this\n\n      connection.onopen = () => {\n        this.setState({\n          connection: connection\n        });\n        that.timeout = 250; // reset timer to 250 on open of websocket connection\n\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receivedData(e.data);\n      };\n\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n        that.timeout += that.timeout; // increment retry interval\n      };\n    };\n\n    this.check = () => {\n      const connection = this.state.connection;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect(); // check if websocket instance is closed, if so call `connect` function.\n    };\n\n    this.receiveData = rawData => {\n      const currentData = this.state.currentData;\n      const data = JSON.parse(rawData);\n      const time = +Date.now();\n      const timeElapsed = time - this.lastPacketTime;\n      data.timeElapsed = timeElapsed;\n      this.lastPacketTime = time;\n\n      if (data.flightData) {\n        data.flightData.timeRecieved = time / 1000 || 0;\n        data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n        data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n        data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n        this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n        this.dataLog.push(data.flightData);\n        this.setState({\n          currentData: data\n        });\n      }\n    };\n\n    this.clearDataLog = () => {\n      this.dataLog = [];\n    };\n\n    this.download = (filename, text) => {\n      const pom = document.createElement('a');\n      pom.setAttribute('href', \"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(text)));\n      pom.setAttribute('download', filename);\n\n      if (document.createEvent) {\n        const event = document.createEvent('MouseEvents');\n        event.initEvent('click', true, true);\n        pom.dispatchEvent(event);\n      } else {\n        pom.click();\n      }\n    };\n\n    this.saveDataLog = () => {\n      console.info(\"Saving\", this.dataLog.length, \"records\");\n      let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\" + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n      this.dataLog.forEach(d => {\n        csv = \"\".concat(csv, \"\\n\").concat(d.timeSent, \", \").concat(d.timeRecieved, \", \").concat(d.latitude, \", \").concat(d.longitude, \", \").concat(d.altitude, \", \").concat(d.velocity, \", \").concat(d.accuracy, \",             \").concat(d.payloadPredictionDistance, \",\").concat(d.payloadLatLong[0], \", \").concat(d.payloadLatLong[1], \",\").concat(d.CDAPredictionDistance, \",\").concat(d.cdaLatLong[0], \", \").concat(d.cdaLatLong[1]);\n      });\n      this.download(\"Flight Log \".concat(new Date().toISOString(), \".csv\"), csv);\n    };\n\n    this.state = {\n      connection: null\n    };\n    this.connect();\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  render() {\n    const currentData = this.state.currentData;\n    return React.createElement(Tab.Pane, {\n      style: {\n        paddingLeft: 0,\n        paddingBottom: \"1em\",\n        border: \"none\",\n        height: \"100%\",\n        boxSizing: \"content-box\",\n        paddingRight: 0,\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        height: \"calc(100% - 2em)\",\n        overflow: \"hidden\",\n        overflowX: \"auto\",\n        paddingBottom: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(MapArea, {\n      currentData: currentData,\n      planePositionHistory: this.planePositionHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(DataArea, {\n      saveLog: this.saveDataLog,\n      clearLog: this.clearDataLog,\n      receiveData: this.receiveData,\n      currentData: currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(DropArea, {\n      currentData: currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GroundStation;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/GroundStation/index.jsx"],"names":["React","Component","Tab","MapArea","DataArea","DropArea","predictPayload","predictCDA","predictLoc","getDirection","GroundStation","constructor","props","dataLog","planePositionHistory","state","currentData","lastPacketTime","timeout","receivedData","data","console","info","receiveData","connect","localServer","remoteServer","server","connection","WebSocket","that","onopen","setState","onerror","error","message","close","onmessage","e","onclose","check","readyState","CLOSED","rawData","JSON","parse","time","Date","now","timeElapsed","flightData","timeRecieved","payloadPredictionDistance","altitude","velocity","headwind","CDAPredictionDistance","direction","payloadLatLong","cdaLatLong","push","latitude","longitude","clearDataLog","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","saveDataLog","length","csv","forEach","d","timeSent","accuracy","toISOString","componentDidMount","render","paddingLeft","paddingBottom","border","height","boxSizing","paddingRight","maxWidth","display","overflow","overflowX"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\n\nimport { predictPayload, predictCDA } from \"../../helpers/predictions\";\nimport { predictLoc } from \"../../helpers/location\";\nimport { getDirection } from \"../../helpers/direction\";\n\n\nclass GroundStation extends Component {\n  dataLog = [];\n\n  planePositionHistory = [];\n\n  state = {\n    currentData: {},\n  };\n\n  lastPacketTime = 0;\n\n  timeout = 250;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      connection: null,\n    };\n    this.connect();\n  }\n\n  receivedData = (data) => {\n    console.info(\"received:\", data);\n    this.receiveData(data);\n  };\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  connect = () => {\n    console.info(\"Connecting....\");\n    const localServer = \"ws://localhost:8888\";\n    const remoteServer = \"ws://104.248.73.89:8888\";\n    const server = remoteServer;\n    const connection = new WebSocket(server);\n    this.connection = connection;\n    const that = this; // cache the this\n    connection.onopen = () => {\n      this.setState({ connection: connection });\n      that.timeout = 250; // reset timer to 250 on open of websocket connection\n      console.info(\"Connected to server\");\n    };\n    connection.onerror = (error) => {\n      console.error(\n        \"Socket encountered error: \",\n        error.message,\n        \"Closing socket\",\n      );\n      connection.close();\n      console.info(\"Connection error\", error);\n    };\n    connection.onmessage = (e) => {\n      this.receivedData(e.data);\n    };\n    connection.onclose = () => {\n      console.info(\"Disconnected from server\");\n      that.timeout += that.timeout; // increment retry interval\n    };\n  };\n\n  check = () => {\n    const { connection } = this.state;\n    if (!connection || connection.readyState == WebSocket.CLOSED) this.connect(); // check if websocket instance is closed, if so call `connect` function.\n  };\n\n  // ==================================================================================\n\n  receiveData = (rawData) => {\n    const { currentData } = this.state;\n    const data = JSON.parse(rawData);\n    const time = +Date.now();\n    const timeElapsed = time - this.lastPacketTime;\n    data.timeElapsed = timeElapsed;\n    this.lastPacketTime = time;\n    if (data.flightData) {\n      data.flightData.timeRecieved = (time / 1000) || 0;\n\n      data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n      data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n\n      data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n\n      data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n      data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n\n      this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n      this.dataLog.push(data.flightData);\n\n      this.setState({ currentData: data });\n    }\n  };\n\n\n  clearDataLog = () => {\n    this.dataLog = [];\n  };\n\n  download = (filename, text) => {\n    const pom = document.createElement('a');\n    pom.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`);\n    pom.setAttribute('download', filename);\n\n    if (document.createEvent) {\n      const event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n    } else {\n      pom.click();\n    }\n  };\n\n  saveDataLog = () => {\n    console.info(\"Saving\", this.dataLog.length, \"records\");\n    let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\"\n      + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n    this.dataLog.forEach((d) => {\n      csv = `${csv}\\n${d.timeSent}, ${d.timeRecieved}, ${d.latitude}, ${d.longitude}, ${d.altitude}, ${d.velocity}, ${d.accuracy}, \\\n            ${d.payloadPredictionDistance},${d.payloadLatLong[0]}, ${d.payloadLatLong[1]},${d.CDAPredictionDistance},${d.cdaLatLong[0]}, ${d.cdaLatLong[1]}`;\n    });\n\n    this.download(`Flight Log ${new Date().toISOString()}.csv`, csv);\n  };\n\n\n  render() {\n    const { currentData } = this.state;\n    return (\n      <Tab.Pane\n        style={{\n          paddingLeft: 0,\n          paddingBottom: \"1em\",\n          border: \"none\",\n          height: \"100%\",\n          boxSizing: \"content-box\",\n          paddingRight: 0,\n          maxWidth: \"100%\",\n        }}\n      >\n        <div style={{ display: \"flex\", height: \"calc(100% - 2em)\", overflow: \"hidden\", overflowX: \"auto\", paddingBottom: \"1em\" }}>\n          <MapArea currentData={currentData} planePositionHistory={this.planePositionHistory} />\n          <DataArea saveLog={this.saveDataLog} clearLog={this.clearDataLog} receiveData={this.receiveData} currentData={currentData} />\n          <DropArea currentData={currentData} />\n        </div>\n      </Tab.Pane>\n    );\n  }\n}\n\nexport default GroundStation;\n"]},"metadata":{},"sourceType":"module"}