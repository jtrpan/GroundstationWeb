{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\MapArea\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Segment } from \"semantic-ui-react\";\nimport AeroMap from \"./components/AeroMap\";\nimport MapSettings from \"./components/MapSettings\";\nimport \"./css/style.css\";\n\nclass MapArea extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mapLat: 49.258063,\n      mapLong: -123.195911,\n      targLat: null,\n      targLng: null,\n      followPlane: false,\n      drawPlane: true,\n      drawTarget: true,\n      drawCDAPredictionPoint: true,\n      drawPayloadPredictionPoint: true,\n      drawPlanePositionHistory: true,\n      zoom: 10\n    };\n\n    this.changeSettingsState = state => {\n      this.setState(state);\n    };\n\n    this.zoomToPlane = () => {\n      const currentData = this.props.currentData;\n      if (!currentData) return;\n      const latitude = currentData.latitude,\n            longitude = currentData.longitude;\n      const eps = Math.random() * 0.00000001;\n      this.setState({\n        mapLat: latitude + eps,\n        mapLong: longitude + eps,\n        zoom: 19 + eps\n      });\n    };\n\n    this.zoomToTarget = () => {\n      const _this$state = this.state,\n            targLat = _this$state.targLat,\n            targLng = _this$state.targLng;\n      if (!targLat || !targLng) return;\n      const eps = Math.random() * 0.00000001;\n      this.setState({\n        mapLat: targLat + eps,\n        mapLong: targLng + eps,\n        zoom: 19 + eps\n      });\n    };\n\n    this.setNewTarget = (inputLat, inputLng) => {\n      this.setState({\n        targLat: inputLat,\n        targLng: inputLng\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          currentData = _this$props.currentData,\n          planePositionHistory = _this$props.planePositionHistory,\n          clearRoute = _this$props.clearRoute;\n    const _this$state2 = this.state,\n          mapLat = _this$state2.mapLat,\n          mapLong = _this$state2.mapLong,\n          targLat = _this$state2.targLat,\n          targLng = _this$state2.targLng,\n          zoom = _this$state2.zoom,\n          followPlane = _this$state2.followPlane,\n          drawPlane = _this$state2.drawPlane,\n          drawTarget = _this$state2.drawTarget,\n          drawCDAPredictionPoint = _this$state2.drawCDAPredictionPoint,\n          drawPayloadPredictionPoint = _this$state2.drawPayloadPredictionPoint,\n          drawPlanePositionHistory = _this$state2.drawPlanePositionHistory;\n\n    if (followPlane) {\n      if (mapLat !== currentData.latitude || mapLong !== currentData.longitude) {\n        this.setState({\n          mapLat: currentData.latitude,\n          mapLong: currentData.longitude\n        });\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      style: {\n        padding: \"0px\",\n        display: \"flex\",\n        borderLeft: \"none\",\n        height: \"100%\",\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(AeroMap, {\n      planeLat: currentData.latitude,\n      planeLong: currentData.longitude,\n      mapLat: mapLat,\n      mapLong: mapLong,\n      targLat: targLat,\n      targLng: targLng,\n      zoom: zoom,\n      drawPlane: drawPlane,\n      drawTarget: drawTarget,\n      drawPlanePositionHistory: drawPlanePositionHistory,\n      drawCDAPredictionPoint: drawCDAPredictionPoint,\n      drawPayloadPredictionPoint: drawPayloadPredictionPoint,\n      payloadLat: currentData.payloadLat,\n      payloadLong: currentData.payloadLong,\n      cdaLat: currentData.cdaLat,\n      cdaLong: currentData.cdaLong,\n      planePositionHistory: planePositionHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(MapSettings, {\n      drawPlane: drawPlane,\n      drawTarget: drawTarget,\n      drawCDAPredictionPoint: drawCDAPredictionPoint,\n      drawPayloadPredictionPoint: drawPayloadPredictionPoint,\n      drawPlanePositionHistory: drawPlanePositionHistory,\n      followPlane: followPlane,\n      zoomToPlane: this.zoomToPlane,\n      zoomToTarget: this.zoomToTarget,\n      changeSettingsState: this.changeSettingsState,\n      setNewTarget: this.setNewTarget,\n      targLat: targLat,\n      targLng: targLng,\n      clearRoute: clearRoute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MapArea;","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/components/MapArea/index.jsx"],"names":["React","Component","Segment","AeroMap","MapSettings","MapArea","state","mapLat","mapLong","targLat","targLng","followPlane","drawPlane","drawTarget","drawCDAPredictionPoint","drawPayloadPredictionPoint","drawPlanePositionHistory","zoom","changeSettingsState","setState","zoomToPlane","currentData","props","latitude","longitude","eps","Math","random","zoomToTarget","setNewTarget","inputLat","inputLng","render","planePositionHistory","clearRoute","padding","display","borderLeft","height","borderTopLeftRadius","borderBottomLeftRadius","payloadLat","payloadLong","cdaLat","cdaLong"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Segment } from \"semantic-ui-react\";\nimport AeroMap from \"./components/AeroMap\";\nimport MapSettings from \"./components/MapSettings\";\nimport \"./css/style.css\";\n\nclass MapArea extends Component {\n  state = {\n    mapLat: 49.258063,\n    mapLong: -123.195911,\n    targLat: null,\n    targLng: null,\n    followPlane: false,\n    drawPlane: true,\n    drawTarget: true,\n    drawCDAPredictionPoint: true,\n    drawPayloadPredictionPoint: true,\n    drawPlanePositionHistory: true,\n    zoom: 10,\n  };\n\n  changeSettingsState = (state) => {\n    this.setState(state);\n  };\n\n  zoomToPlane = () => {\n    const { currentData } = this.props;\n    if (!currentData) return;\n    const { latitude, longitude } = currentData;\n    const eps = Math.random()*0.00000001;\n    this.setState({ mapLat: latitude+eps, mapLong: longitude+eps, zoom: 19+eps });\n  };\n\n  zoomToTarget = () => {\n    const { targLat, targLng } = this.state;\n    if (!targLat || !targLng) return;\n    const eps = Math.random()*0.00000001;\n    this.setState({ mapLat: targLat + eps, mapLong: targLng + eps, zoom: 19+eps });\n  };\n\n  setNewTarget = (inputLat, inputLng) => {\n    this.setState({\n      targLat: inputLat,\n      targLng: inputLng,\n    });\n  };\n\n  render() {\n    const { currentData, planePositionHistory, clearRoute } = this.props;\n    const {\n      mapLat,\n      mapLong,\n      targLat,\n      targLng,\n      zoom,\n      followPlane,\n      drawPlane,\n      drawTarget,\n      drawCDAPredictionPoint,\n      drawPayloadPredictionPoint,\n      drawPlanePositionHistory,\n    } = this.state;\n\n    if (followPlane) {\n      if (mapLat !== currentData.latitude || mapLong !== currentData.longitude) {\n        this.setState({ mapLat: currentData.latitude, mapLong: currentData.longitude });\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Segment\n          style={{\n            padding: \"0px\",\n            display: \"flex\",\n            borderLeft: \"none\",\n            height: \"100%\",\n            borderTopLeftRadius: 0,\n            borderBottomLeftRadius: 0,\n          }}\n        >\n          <AeroMap\n            planeLat={currentData.latitude}\n            planeLong={currentData.longitude}\n            mapLat={mapLat}\n            mapLong={mapLong}\n            targLat={targLat}\n            targLng={targLng}\n            zoom={zoom}\n            drawPlane={drawPlane}\n            drawTarget={drawTarget}\n            drawPlanePositionHistory={drawPlanePositionHistory}\n            drawCDAPredictionPoint={drawCDAPredictionPoint}\n            drawPayloadPredictionPoint={drawPayloadPredictionPoint}\n            payloadLat={currentData.payloadLat}\n            payloadLong={currentData.payloadLong}\n            cdaLat={currentData.cdaLat}\n            cdaLong={currentData.cdaLong}\n            planePositionHistory={planePositionHistory}\n          />\n        </Segment>\n        <MapSettings\n          drawPlane={drawPlane}\n          drawTarget={drawTarget}\n          drawCDAPredictionPoint={drawCDAPredictionPoint}\n          drawPayloadPredictionPoint={drawPayloadPredictionPoint}\n          drawPlanePositionHistory={drawPlanePositionHistory}\n          followPlane={followPlane}\n          zoomToPlane={this.zoomToPlane}\n          zoomToTarget={this.zoomToTarget}\n          changeSettingsState={this.changeSettingsState}\n          setNewTarget={this.setNewTarget}\n          targLat={targLat}\n          targLng={targLng}\n          clearRoute={clearRoute}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MapArea;\n"]},"metadata":{},"sourceType":"module"}