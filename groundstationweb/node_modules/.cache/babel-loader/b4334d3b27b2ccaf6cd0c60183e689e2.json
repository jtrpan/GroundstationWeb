{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\GroundStation\\\\index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\nimport { predictCDA, predictPayload } from \"../../helpers/predictions\";\nimport { getDirection } from \"../../helpers/direction\";\nimport { predictLoc } from \"../../helpers/location\";\n\nclass GroundStation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentData: {\n        // set an initial state for everything\n        latitude: 0,\n        longitude: 0,\n        altitude: 0,\n        bearing: 0,\n        direction: 0,\n        velocity: 0,\n        headwind: 0,\n        payloadLat: 0,\n        payloadLong: 0,\n        cdaLat: 0,\n        cdaLong: 0,\n        cargoDropped: false,\n        cdaDropped: false,\n        CDAPredictionDistance: 0,\n        payloadPredictionDistance: 0\n      },\n      isConnected: false,\n      cargoDropped: false,\n      cdaDropped: false\n    };\n    this.dataLog = [];\n    this.planePositionHistory = [];\n\n    this.setDropped = (drop, value) => {\n      const change = {\n        flightData: {}\n      };\n      change.flightData[drop] = value;\n      this.setData(change);\n    };\n\n    this.setData = data => {\n      const time = +Date.now();\n      const timeElapsed = time - this.state.lastPacketTime;\n      const currentData = this.state.currentData;\n      data.timeElapsed = timeElapsed;\n      this.state.lastPacketTime = time;\n\n      if (data.flightData) {\n        const flightData = _objectSpread({}, currentData, {}, data.flightData); // merge old data with new data\n\n\n        flightData.timeRecieved = time / 1000 || 0;\n        flightData.payloadPredictionDistance = predictPayload(flightData.altitude, flightData.velocity, flightData.headwind);\n        flightData.CDAPredictionDistance = predictCDA(flightData.altitude, flightData.velocity, flightData.headwind);\n        flightData.direction = getDirection(currentData, flightData);\n        /* eslint prefer-destructuring:0 */\n\n        const payloadLatLong = predictLoc(flightData, flightData.payloadPredictionDistance);\n        flightData.payloadLat = payloadLatLong[0];\n        flightData.payloadLong = payloadLatLong[1];\n        const cdaLatLong = predictLoc(flightData, flightData.CDAPredictionDistance);\n        flightData.cdaLat = cdaLatLong[0];\n        flightData.cdaLong = cdaLatLong[1];\n        this.planePositionHistory.push([flightData.latitude, flightData.longitude]);\n        this.dataLog.push(flightData);\n        this.setState({\n          currentData: flightData\n        });\n      }\n    };\n\n    this.setConnected = isConnected => {\n      this.setState({\n        isConnected\n      });\n    };\n\n    this.getConnected = () => {\n      return this.state.isConnected;\n    };\n\n    this.webSocketManager = new WebSocketManager(this.setData, this.setConnected, this.getConnected);\n\n    this.clearDataLog = () => {\n      this.dataLog = [];\n    };\n\n    this.clearRoute = () => {\n      this.planePositionHistory = [];\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          currentData = _this$state.currentData,\n          isConnected = _this$state.isConnected;\n    return React.createElement(\"div\", {\n      style: {\n        paddingLeft: 0,\n        paddingBottom: \"1em\",\n        paddingTop: \"1em\",\n        border: \"none\",\n        height: \"100%\",\n        boxSizing: \"content-box\",\n        paddingRight: 0,\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        height: \"calc(100% - 2em)\",\n        overflow: \"hidden\",\n        overflowX: \"auto\",\n        paddingBottom: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(MapArea, {\n      currentData: currentData,\n      planePositionHistory: this.planePositionHistory,\n      clearRoute: this.clearRoute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(DataArea, {\n      dataLog: this.dataLog,\n      saveLog: this.saveDataLog,\n      clearLog: this.clearDataLog,\n      receiveData: this.receiveData,\n      currentData: currentData,\n      webSocketManager: this.webSocketManager,\n      isConnected: isConnected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(DropArea, {\n      currentData: currentData,\n      webSocketManager: this.webSocketManager,\n      isConnected: isConnected,\n      cargoDropped: currentData.cargoDropped,\n      cdaDropped: currentData.cdaDropped,\n      setDropped: this.setDropped,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GroundStation;","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/components/GroundStation/index.jsx"],"names":["React","Component","MapArea","DataArea","DropArea","WebSocketManager","predictCDA","predictPayload","getDirection","predictLoc","GroundStation","state","currentData","latitude","longitude","altitude","bearing","direction","velocity","headwind","payloadLat","payloadLong","cdaLat","cdaLong","cargoDropped","cdaDropped","CDAPredictionDistance","payloadPredictionDistance","isConnected","dataLog","planePositionHistory","setDropped","drop","value","change","flightData","setData","data","time","Date","now","timeElapsed","lastPacketTime","timeRecieved","payloadLatLong","cdaLatLong","push","setState","setConnected","getConnected","webSocketManager","clearDataLog","clearRoute","render","paddingLeft","paddingBottom","paddingTop","border","height","boxSizing","paddingRight","maxWidth","display","overflow","overflowX","saveDataLog","receiveData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\nimport { predictCDA, predictPayload } from \"../../helpers/predictions\";\nimport { getDirection } from \"../../helpers/direction\";\nimport { predictLoc } from \"../../helpers/location\";\n\n\nclass GroundStation extends Component {\n  state = {\n    currentData: { // set an initial state for everything\n      latitude: 0,\n      longitude: 0,\n      altitude: 0,\n      bearing: 0,\n      direction: 0,\n      velocity: 0,\n      headwind: 0,\n      payloadLat: 0,\n      payloadLong: 0,\n      cdaLat: 0,\n      cdaLong: 0,\n      cargoDropped: false,\n      cdaDropped: false,\n      CDAPredictionDistance: 0,\n      payloadPredictionDistance: 0,\n    },\n    isConnected: false,\n    cargoDropped: false,\n    cdaDropped: false,\n  };\n\n  dataLog = [];\n\n  planePositionHistory = [];\n\n  setDropped = (drop, value) => {\n    const change = { flightData: {} };\n    change.flightData[drop] = value;\n    this.setData(change);\n  };\n\n  setData = (data) => {\n    const time = +Date.now();\n    const timeElapsed = time - this.state.lastPacketTime;\n    const { currentData } = this.state;\n    data.timeElapsed = timeElapsed;\n    this.state.lastPacketTime = time;\n    if (data.flightData) {\n      const flightData = { ...currentData, ...data.flightData }; // merge old data with new data\n      flightData.timeRecieved = (time / 1000) || 0;\n\n      flightData.payloadPredictionDistance = predictPayload(flightData.altitude, flightData.velocity, flightData.headwind);\n      flightData.CDAPredictionDistance = predictCDA(flightData.altitude, flightData.velocity, flightData.headwind);\n\n      flightData.direction = getDirection(currentData, flightData);\n\n      /* eslint prefer-destructuring:0 */\n      const payloadLatLong = predictLoc(flightData, flightData.payloadPredictionDistance);\n      flightData.payloadLat = payloadLatLong[0];\n      flightData.payloadLong = payloadLatLong[1];\n      const cdaLatLong = predictLoc(flightData, flightData.CDAPredictionDistance);\n      flightData.cdaLat = cdaLatLong[0];\n      flightData.cdaLong = cdaLatLong[1];\n\n      this.planePositionHistory.push([flightData.latitude, flightData.longitude]);\n      this.dataLog.push(flightData);\n      this.setState({ currentData: flightData });\n    }\n  };\n\n  setConnected = (isConnected) => {\n    this.setState({ isConnected });\n  };\n\n  getConnected = () => {\n    return this.state.isConnected;\n  };\n\n  webSocketManager = new WebSocketManager(this.setData, this.setConnected, this.getConnected);\n\n  clearDataLog = () => {\n    this.dataLog = [];\n  };\n\n  clearRoute = () => {\n    this.planePositionHistory = [];\n  };\n\n  render() {\n    const { currentData, isConnected } = this.state;\n    return (\n      <div\n        style={{\n          paddingLeft: 0,\n          paddingBottom: \"1em\",\n          paddingTop: \"1em\",\n          border: \"none\",\n          height: \"100%\",\n          boxSizing: \"content-box\",\n          paddingRight: 0,\n          maxWidth: \"100%\",\n        }}\n      >\n        <div style={{ display: \"flex\", height: \"calc(100% - 2em)\", overflow: \"hidden\", overflowX: \"auto\", paddingBottom: \"1em\" }}>\n          <MapArea currentData={currentData} planePositionHistory={this.planePositionHistory} clearRoute={this.clearRoute} />\n          <DataArea\n            dataLog={this.dataLog}\n            saveLog={this.saveDataLog}\n            clearLog={this.clearDataLog}\n            receiveData={this.receiveData}\n            currentData={currentData}\n            webSocketManager={this.webSocketManager}\n            isConnected={isConnected}\n          />\n          <DropArea\n            currentData={currentData}\n            webSocketManager={this.webSocketManager}\n            isConnected={isConnected}\n            cargoDropped={currentData.cargoDropped}\n            cdaDropped={currentData.cdaDropped}\n            setDropped={this.setDropped}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GroundStation;\n"]},"metadata":{},"sourceType":"module"}