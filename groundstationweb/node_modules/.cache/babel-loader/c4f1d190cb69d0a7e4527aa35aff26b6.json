{"ast":null,"code":"import { predictCDA, predictPayload } from \"./predictions\";\nimport { getDirection } from \"./direction\";\nimport { predictLoc } from \"./location\";\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\nconst connected = false;\nconst lastPacketTime = null;\nconst currentData = null;\n\nclass WebSocketManager {\n  constructor(setData) {\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.connected = true;\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receiveData(e.data);\n      };\n\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n    this.receiveData = rawData => {\n      const data = JSON.parse(rawData);\n      const time = +Date.now();\n      const timeElapsed = time - this.state.lastPacketTime;\n      data.timeElapsed = timeElapsed;\n      this.state.lastPacketTime = time;\n\n      if (data.flightData) {\n        data.flightData.timeRecieved = time / 1000 || 0;\n        data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n        data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n        data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n        this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n        this.dataLog.push(data.flightData);\n        this.setData(data);\n      }\n    };\n\n    this.testData = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    this.ping = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        action: {// ping\n        }\n      });\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n    this.release = identity => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot drop. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        action: {\n          // drop details\n          object: identity\n        }\n      });\n      console.info(\"Sending drop signal:\", message);\n      this.connection.send(message);\n    };\n\n    this.setData = setData;\n    this.connect();\n  }\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n\n\n}\n\nexport default WebSocketManager;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/helpers/WebSocketManager.js"],"names":["predictCDA","predictPayload","getDirection","predictLoc","localServer","remoteServer","server","connected","lastPacketTime","currentData","WebSocketManager","constructor","setData","connect","console","info","connection","WebSocket","onopen","onerror","error","message","close","onmessage","e","receiveData","data","onclose","rawData","JSON","parse","time","Date","now","timeElapsed","state","flightData","timeRecieved","payloadPredictionDistance","altitude","velocity","headwind","CDAPredictionDistance","direction","payloadLatLong","cdaLatLong","planePositionHistory","push","latitude","longitude","dataLog","testData","warn","stringify","type","Math","random","send","ping","action","release","identity","object"],"mappings":"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","sourcesContent":["import { predictCDA, predictPayload } from \"./predictions\";\nimport { getDirection } from \"./direction\";\nimport { predictLoc } from \"./location\";\n\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\nconst server = remoteServer;\nconst connected = false;\nconst lastPacketTime = null;\nconst currentData = null;\n\nclass WebSocketManager {\n  constructor(setData) {\n    this.setData = setData;\n    this.connect();\n  }\n\n    connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.connected = true;\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = (error) => {\n        console.error(\n          \"Socket encountered error: \",\n          error.message,\n          \"Closing socket\",\n        );\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n      connection.onmessage = (e) => {\n        this.receiveData(e.data);\n      };\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n  receiveData = (rawData) => {\n    const data = JSON.parse(rawData);\n    const time = +Date.now();\n    const timeElapsed = time - this.state.lastPacketTime;\n    data.timeElapsed = timeElapsed;\n    this.state.lastPacketTime = time;\n    if (data.flightData) {\n      data.flightData.timeRecieved = (time / 1000) || 0;\n\n      data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n      data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n\n      data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n\n      data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n      data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n\n      this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n      this.dataLog.push(data.flightData);\n\n      this.setData(data);\n    }\n  };\n\n    testData = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n      const data = JSON.stringify(\n        {\n          type: \"data\",\n          flightData: {\n            latitude: 49.258063+Math.random()*0.00111,\n            longitude: -123.195911+Math.random()*0.00111,\n            altitude: 45.3,\n            velocity: 10.3,\n            headwind: -0.9,\n          },\n        },\n      );\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    ping = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n      const message = JSON.stringify(\n        {\n          type: \"action\",\n          action: {\n            // ping\n          },\n        },\n      );\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n  release = (identity) => {\n    const { connected } = this.state;\n    if (!connected) {\n      console.warn(\"Cannot drop. Not connected\");\n      return;\n    }\n    const message = JSON.stringify(\n      {\n        type: \"action\",\n        action: {\n          // drop details\n          object: identity,\n        },\n      },\n    );\n    console.info(\"Sending drop signal:\", message);\n    this.connection.send(message);\n  };\n\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n}\nexport default WebSocketManager;\n"]},"metadata":{},"sourceType":"module"}