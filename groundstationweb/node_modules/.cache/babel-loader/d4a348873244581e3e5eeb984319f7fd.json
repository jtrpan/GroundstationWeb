{"ast":null,"code":"export const predictLoc = (currentData, distance) => {\n  if (currentData == null || distance == null) {\n    return [0, 0];\n  }\n\n  let latitude = currentData.latitude,\n      longitude = currentData.longitude,\n      direction = currentData.direction;\n  return calculateNewPositionOfObject(latitude, longitude, distance, direction);\n}; //Calculate new position of object in degrees (latitude & longitude)\n// based on https://www.movable-type.co.uk/scripts/latlong.html#dest-point\n\nconst calculateNewPositionOfObject = (currentLatitude, currentLongitude, distance, direction) => {\n  let angularDistance = calcAngularDistance(distance);\n  let currentLatRad = toRadians(currentLatitude),\n      currentLongRad = toRadians(currentLongitude),\n      directionRad = toRadians(direction);\n  let newLatitudeRadians = newLatitudeOfObject(currentLatRad, angularDistance, directionRad);\n  let newLongitudeRadians = newLongitudeOfObject(currentLatRad, currentLongRad, newLatitudeRadians, angularDistance, directionRad);\n  return [toDegrees(newLatitudeRadians), toDegrees(newLongitudeRadians)];\n};\n\nconst newLatitudeOfObject = (currentLatRad, angularDistance, directionRad) => {\n  return Math.asin(Math.sin(currentLatRad) * Math.cos(angularDistance) + Math.cos(currentLatRad) * Math.sin(angularDistance) * Math.cos(directionRad));\n};\n\nconst newLongitudeOfObject = (currentLatRad, currentLongRad, newLatRad, angularDistance, directionRad) => {\n  return currentLongRad + Math.atan2(Math.sin(directionRad) * Math.sin(angularDistance) * Math.cos(currentLatRad), Math.cos(angularDistance) - Math.sin(currentLatRad) * Math.sin(newLatRad));\n};\n\nconst toDegrees = rad => {\n  return rad * 180 / Math.PI;\n};\n\nconst toRadians = angle => {\n  return angle * Math.PI / 180;\n}; // Calculate the angular distance w.r.t mean earth radius\n// Assumes distance in ft;\n\n\nconst calcAngularDistance = distance => {\n  let earthRadius = 6378100; // average earth radius in m;\n\n  let feetInM = 3.218; // number of ft in 1m\n\n  let distanceInM = distance / feetInM;\n  return distanceInM / earthRadius;\n};","map":{"version":3,"sources":["C:\\Users\\James Pan\\Desktop\\demo\\groundstationweb\\src\\helpers\\location.js"],"names":["predictLoc","currentData","distance","latitude","longitude","direction","calculateNewPositionOfObject","currentLatitude","currentLongitude","angularDistance","calcAngularDistance","currentLatRad","toRadians","currentLongRad","directionRad","newLatitudeRadians","newLatitudeOfObject","newLongitudeRadians","newLongitudeOfObject","toDegrees","Math","asin","sin","cos","newLatRad","atan2","rad","PI","angle","earthRadius","feetInM","distanceInM"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,CAACC,WAAD,EAAcC,QAAd,KAA0B;AAChD,MAAID,WAAW,IAAI,IAAf,IAAuBC,QAAQ,IAAI,IAAvC,EAA4C;AACxC,WAAO,CAAC,CAAD,EAAG,CAAH,CAAP;AACH;;AAED,MAAIC,QAAQ,GAAGF,WAAW,CAACE,QAA3B;AAAA,MACIC,SAAS,GAAGH,WAAW,CAACG,SAD5B;AAAA,MAEIC,SAAS,GAAGJ,WAAW,CAACI,SAF5B;AAIA,SAAOC,4BAA4B,CAACH,QAAD,EAAWC,SAAX,EAAsBF,QAAtB,EAAgCG,SAAhC,CAAnC;AACH,CAVM,C,CAYP;AACA;;AACA,MAAMC,4BAA4B,GAAG,CAACC,eAAD,EAAkBC,gBAAlB,EAAoCN,QAApC,EAA8CG,SAA9C,KAA4D;AAE7F,MAAII,eAAe,GAAGC,mBAAmB,CAACR,QAAD,CAAzC;AAEA,MAAIS,aAAa,GAAGC,SAAS,CAACL,eAAD,CAA7B;AAAA,MACIM,cAAc,GAAGD,SAAS,CAACJ,gBAAD,CAD9B;AAAA,MAEIM,YAAY,GAAGF,SAAS,CAACP,SAAD,CAF5B;AAIA,MAAIU,kBAAkB,GAAGC,mBAAmB,CAACL,aAAD,EAAgBF,eAAhB,EAAiCK,YAAjC,CAA5C;AACA,MAAIG,mBAAmB,GAAGC,oBAAoB,CAACP,aAAD,EAAgBE,cAAhB,EAC1CE,kBAD0C,EACtBN,eADsB,EACLK,YADK,CAA9C;AAGA,SAAO,CAACK,SAAS,CAACJ,kBAAD,CAAV,EAAgCI,SAAS,CAACF,mBAAD,CAAzC,CAAP;AACH,CAbD;;AAeA,MAAMD,mBAAmB,GAAG,CAACL,aAAD,EAAgBF,eAAhB,EAAiCK,YAAjC,KAAkD;AAC1E,SAAOM,IAAI,CAACC,IAAL,CAAWD,IAAI,CAACE,GAAL,CAASX,aAAT,IAAwBS,IAAI,CAACG,GAAL,CAASd,eAAT,CAAxB,GACdW,IAAI,CAACG,GAAL,CAASZ,aAAT,IAAwBS,IAAI,CAACE,GAAL,CAASb,eAAT,CAAxB,GAAkDW,IAAI,CAACG,GAAL,CAAST,YAAT,CAD/C,CAAP;AAEH,CAHD;;AAKA,MAAMI,oBAAoB,GAAG,CAACP,aAAD,EAAgBE,cAAhB,EAAgCW,SAAhC,EAA2Cf,eAA3C,EAA4DK,YAA5D,KAA6E;AACtG,SAAOD,cAAc,GAAGO,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACE,GAAL,CAASR,YAAT,IAAuBM,IAAI,CAACE,GAAL,CAASb,eAAT,CAAvB,GAAiDW,IAAI,CAACG,GAAL,CAASZ,aAAT,CAA5D,EACpBS,IAAI,CAACG,GAAL,CAASd,eAAT,IAA0BW,IAAI,CAACE,GAAL,CAASX,aAAT,IAAwBS,IAAI,CAACE,GAAL,CAASE,SAAT,CAD9B,CAAxB;AAEH,CAHD;;AAKA,MAAML,SAAS,GAAIO,GAAD,IAAS;AACvB,SAAOA,GAAG,GAAG,GAAN,GAAYN,IAAI,CAACO,EAAxB;AACH,CAFD;;AAIA,MAAMf,SAAS,GAAIgB,KAAD,IAAW;AACzB,SAAOA,KAAK,GAAGR,IAAI,CAACO,EAAb,GAAkB,GAAzB;AACH,CAFD,C,CAIA;AACA;;;AACA,MAAMjB,mBAAmB,GAAIR,QAAD,IAAc;AACtC,MAAI2B,WAAW,GAAG,OAAlB,CADsC,CACX;;AAC3B,MAAIC,OAAO,GAAG,KAAd,CAFsC,CAEjB;;AACrB,MAAIC,WAAW,GAAG7B,QAAQ,GAAG4B,OAA7B;AAEA,SAAOC,WAAW,GAAGF,WAArB;AACH,CAND","sourcesContent":["export const predictLoc = (currentData, distance) =>{\r\n    if (currentData == null || distance == null){\r\n        return [0,0];\r\n    }\r\n\r\n    let latitude = currentData.latitude,\r\n        longitude = currentData.longitude,\r\n        direction = currentData.direction;\r\n\r\n    return calculateNewPositionOfObject(latitude, longitude, distance, direction);\r\n}\r\n\r\n//Calculate new position of object in degrees (latitude & longitude)\r\n// based on https://www.movable-type.co.uk/scripts/latlong.html#dest-point\r\nconst calculateNewPositionOfObject = (currentLatitude, currentLongitude, distance, direction) => {\r\n\r\n    let angularDistance = calcAngularDistance(distance);\r\n\r\n    let currentLatRad = toRadians(currentLatitude),\r\n        currentLongRad = toRadians(currentLongitude),\r\n        directionRad = toRadians(direction);\r\n\r\n    let newLatitudeRadians = newLatitudeOfObject(currentLatRad, angularDistance, directionRad);\r\n    let newLongitudeRadians = newLongitudeOfObject(currentLatRad, currentLongRad,\r\n        newLatitudeRadians, angularDistance, directionRad)\r\n\r\n    return [toDegrees(newLatitudeRadians), toDegrees(newLongitudeRadians)];\r\n}\r\n\r\nconst newLatitudeOfObject = (currentLatRad, angularDistance, directionRad) => {\r\n    return Math.asin( Math.sin(currentLatRad)*Math.cos(angularDistance) +\r\n        Math.cos(currentLatRad)*Math.sin(angularDistance)*Math.cos(directionRad));\r\n}\r\n\r\nconst newLongitudeOfObject = (currentLatRad, currentLongRad, newLatRad, angularDistance, directionRad) => {\r\n    return currentLongRad + Math.atan2(Math.sin(directionRad)*Math.sin(angularDistance)*Math.cos(currentLatRad),\r\n        Math.cos(angularDistance)-Math.sin(currentLatRad)*Math.sin(newLatRad));\r\n}\r\n\r\nconst toDegrees = (rad) => {\r\n    return rad * 180 / Math.PI;\r\n}\r\n\r\nconst toRadians = (angle) => {\r\n    return angle * Math.PI / 180;\r\n}\r\n\r\n// Calculate the angular distance w.r.t mean earth radius\r\n// Assumes distance in ft;\r\nconst calcAngularDistance = (distance) => {\r\n    let earthRadius = 6378100; // average earth radius in m;\r\n    let feetInM = 3.218; // number of ft in 1m\r\n    let distanceInM = distance / feetInM;\r\n\r\n    return distanceInM / earthRadius\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}