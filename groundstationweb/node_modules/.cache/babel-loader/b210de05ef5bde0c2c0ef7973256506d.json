{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\GroundStation\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport { predictPayload, predictCDA } from \"../../helpers/predictions\";\nimport { predictLoc } from \"../../helpers/location\";\nimport { getDirection } from \"../../helpers/direction\";\n\nclass GroundStation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.dataLog = [];\n    this.planePositionHistory = [];\n    this.state = {\n      currentData: {}\n    };\n    this.lastPacketTime = 0;\n\n    this.receiveData = rawData => {\n      const currentData = this.state.currentData;\n      const data = JSON.parse(rawData);\n      const time = +Date.now();\n      const timeElapsed = time - this.lastPacketTime;\n      data.timeElapsed = timeElapsed;\n      this.lastPacketTime = time;\n\n      if (data.flightData) {\n        data.flightData.timeRecieved = time / 1000 || 0;\n        data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n        data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n        data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n        this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n        this.dataLog.push(data.flightData);\n        this.setState({\n          currentData: data\n        });\n      }\n    };\n\n    this.clearDataLog = () => {\n      this.dataLog = [];\n    };\n\n    this.download = (filename, text) => {\n      const pom = document.createElement('a');\n      pom.setAttribute('href', \"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(text)));\n      pom.setAttribute('download', filename);\n\n      if (document.createEvent) {\n        const event = document.createEvent('MouseEvents');\n        event.initEvent('click', true, true);\n        pom.dispatchEvent(event);\n      } else {\n        pom.click();\n      }\n    };\n\n    this.saveDataLog = () => {\n      console.info(\"Saving\", this.dataLog.length, \"records\");\n      let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\" + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n      this.dataLog.forEach(d => {\n        csv = \"\".concat(csv, \"\\n\").concat(d.timeSent, \", \").concat(d.timeRecieved, \", \").concat(d.latitude, \", \").concat(d.longitude, \", \").concat(d.altitude, \", \").concat(d.velocity, \", \").concat(d.accuracy, \",             \").concat(d.payloadPredictionDistance, \",\").concat(d.payloadLatLong[0], \", \").concat(d.payloadLatLong[1], \",\").concat(d.CDAPredictionDistance, \",\").concat(d.cdaLatLong[0], \", \").concat(d.cdaLatLong[1]);\n      });\n      this.download(\"Flight Log \".concat(new Date().toISOString(), \".csv\"), csv);\n    };\n  }\n\n  render() {\n    const currentData = this.state.currentData;\n    return React.createElement(Tab.Pane, {\n      style: {\n        paddingLeft: 0,\n        paddingBottom: \"1em\",\n        border: \"none\",\n        height: \"100%\",\n        boxSizing: \"content-box\",\n        paddingRight: 0,\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        height: \"calc(100% - 2em)\",\n        overflow: \"hidden\",\n        overflowX: \"auto\",\n        paddingBottom: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(MapArea, {\n      currentData: currentData,\n      planePositionHistory: this.planePositionHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(DataArea, {\n      saveLog: this.saveDataLog,\n      clearLog: this.clearDataLog,\n      receiveData: this.receiveData,\n      currentData: currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(DropArea, {\n      currentData: currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GroundStation;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/GroundStation/index.jsx"],"names":["React","Component","Tab","MapArea","DataArea","DropArea","predictPayload","predictCDA","predictLoc","getDirection","GroundStation","dataLog","planePositionHistory","state","currentData","lastPacketTime","receiveData","rawData","data","JSON","parse","time","Date","now","timeElapsed","flightData","timeRecieved","payloadPredictionDistance","altitude","velocity","headwind","CDAPredictionDistance","direction","payloadLatLong","cdaLatLong","push","latitude","longitude","setState","clearDataLog","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","saveDataLog","console","info","length","csv","forEach","d","timeSent","accuracy","toISOString","render","paddingLeft","paddingBottom","border","height","boxSizing","paddingRight","maxWidth","display","overflow","overflowX"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\n\nimport { predictPayload, predictCDA } from \"../../helpers/predictions\";\nimport { predictLoc } from \"../../helpers/location\";\nimport { getDirection } from \"../../helpers/direction\";\n\n\nclass GroundStation extends Component {\n  dataLog = [];\n\n  planePositionHistory = [];\n\n  state = {\n    currentData: {},\n  };\n\n  lastPacketTime = 0;\n\n  receiveData = (rawData) => {\n    const { currentData } = this.state;\n    const data = JSON.parse(rawData);\n    const time = +Date.now();\n    const timeElapsed = time - this.lastPacketTime;\n    data.timeElapsed = timeElapsed;\n    this.lastPacketTime = time;\n    if (data.flightData) {\n      data.flightData.timeRecieved = (time / 1000) || 0;\n\n      data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n      data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n\n      data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n\n      data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n      data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n\n      this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n      this.dataLog.push(data.flightData);\n\n      this.setState({ currentData: data });\n    }\n  };\n\n\n  clearDataLog = () => {\n    this.dataLog = [];\n  };\n\n  download = (filename, text) => {\n    const pom = document.createElement('a');\n    pom.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`);\n    pom.setAttribute('download', filename);\n\n    if (document.createEvent) {\n      const event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n    } else {\n      pom.click();\n    }\n  };\n\n  saveDataLog = () => {\n    console.info(\"Saving\", this.dataLog.length, \"records\");\n    let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\"\n        + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n    this.dataLog.forEach((d) => {\n      csv = `${csv}\\n${d.timeSent}, ${d.timeRecieved}, ${d.latitude}, ${d.longitude}, ${d.altitude}, ${d.velocity}, ${d.accuracy}, \\\n            ${d.payloadPredictionDistance},${d.payloadLatLong[0]}, ${d.payloadLatLong[1]},${d.CDAPredictionDistance},${d.cdaLatLong[0]}, ${d.cdaLatLong[1]}`;\n    });\n\n    this.download(`Flight Log ${new Date().toISOString()}.csv`, csv);\n  };\n\n  render() {\n    const { currentData } = this.state;\n    return (\n        <Tab.Pane\n            style={{\n              paddingLeft: 0,\n              paddingBottom: \"1em\",\n              border: \"none\",\n              height: \"100%\",\n              boxSizing: \"content-box\",\n              paddingRight: 0,\n              maxWidth: \"100%\",\n            }}\n        >\n          <div style={{ display: \"flex\", height: \"calc(100% - 2em)\", overflow: \"hidden\", overflowX: \"auto\", paddingBottom: \"1em\" }}>\n            <MapArea currentData={currentData} planePositionHistory={this.planePositionHistory} />\n            <DataArea saveLog={this.saveDataLog} clearLog={this.clearDataLog} receiveData={this.receiveData} currentData={currentData} />\n            <DropArea currentData={currentData} />\n          </div>\n        </Tab.Pane>\n    );\n  }\n}\n\nexport default GroundStation;\n"]},"metadata":{},"sourceType":"module"}