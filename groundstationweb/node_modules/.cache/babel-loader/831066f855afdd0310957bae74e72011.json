{"ast":null,"code":"import React, { Component } from 'react';\nimport { predictCDA, predictPayload } from \"./predictions\";\nimport { getDirection } from \"./direction\";\nimport { predictLoc } from \"./location\";\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\nconst lastPacketTime = 0;\n\nclass WebSocketManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false\n    };\n\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({\n          connected: true\n        });\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receiveData(e.data);\n      };\n\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n    this.receiveData = rawData => {\n      const currentData = this.state.currentData;\n      const data = JSON.parse(rawData);\n      const time = +Date.now();\n      const timeElapsed = time - this.lastPacketTime;\n      data.timeElapsed = timeElapsed;\n      this.lastPacketTime = time;\n\n      if (data.flightData) {\n        data.flightData.timeRecieved = time / 1000 || 0;\n        data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n        data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n        data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n        this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n        this.dataLog.push(data.flightData);\n        this.setState({\n          currentData: data\n        });\n      }\n    };\n\n    this.testData = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    this.ping = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        action: {// ping\n        }\n      });\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n    this.release = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot drop. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        action: {// drop details\n        }\n      });\n      console.info(\"Sending drop signal:\", message);\n      this.connection.send(message);\n    };\n\n    this.connect();\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n\n\n}\n\nexport default WebSocketManager;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/helpers/WebSocketManager.jsx"],"names":["React","Component","predictCDA","predictPayload","getDirection","predictLoc","localServer","remoteServer","server","lastPacketTime","WebSocketManager","constructor","props","state","connected","connect","console","info","connection","WebSocket","onopen","setState","onerror","error","message","close","onmessage","e","receiveData","data","onclose","rawData","currentData","JSON","parse","time","Date","now","timeElapsed","flightData","timeRecieved","payloadPredictionDistance","altitude","velocity","headwind","CDAPredictionDistance","direction","payloadLatLong","cdaLatLong","planePositionHistory","push","latitude","longitude","dataLog","testData","warn","stringify","type","Math","random","send","ping","action","release","componentDidMount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { predictCDA, predictPayload } from \"./predictions\";\nimport { getDirection } from \"./direction\";\nimport { predictLoc } from \"./location\";\n\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\nconst server = remoteServer;\nconst lastPacketTime = 0;\n\nclass WebSocketManager extends Component {\n  constructor(props) {\n    super(props);\n    this.connect();\n  }\n\n    state = {\n      connected: false,\n    };\n\n    componentDidMount() {\n      this.connect();\n    }\n\n    connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({ connected: true });\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = (error) => {\n        console.error(\n          \"Socket encountered error: \",\n          error.message,\n          \"Closing socket\",\n        );\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n      connection.onmessage = (e) => {\n        this.receiveData(e.data);\n      };\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n  receiveData = (rawData) => {\n    const { currentData } = this.state;\n    const data = JSON.parse(rawData);\n    const time = +Date.now();\n    const timeElapsed = time - this.lastPacketTime;\n    data.timeElapsed = timeElapsed;\n    this.lastPacketTime = time;\n    if (data.flightData) {\n      data.flightData.timeRecieved = (time / 1000) || 0;\n\n      data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n      data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n\n      data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n\n      data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n      data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n\n      this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n      this.dataLog.push(data.flightData);\n\n      this.setState({ currentData: data });\n    }\n  };\n\n    testData = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n      const data = JSON.stringify(\n        {\n          type: \"data\",\n          flightData: {\n            latitude: 49.258063+Math.random()*0.00111,\n            longitude: -123.195911+Math.random()*0.00111,\n            altitude: 45.3,\n            velocity: 10.3,\n            headwind: -0.9,\n          },\n        },\n      );\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    ping = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n      const message = JSON.stringify(\n        {\n          type: \"action\",\n          action: {\n            // ping\n          },\n        },\n      );\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n  release = () => {\n    const { connected } = this.state;\n    if (!connected) {\n      console.warn(\"Cannot drop. Not connected\");\n      return;\n    }\n    const message = JSON.stringify(\n      {\n        type: \"action\",\n        action: {\n          // drop details\n        },\n      },\n    );\n    console.info(\"Sending drop signal:\", message);\n    this.connection.send(message);\n  };\n\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n}\nexport default WebSocketManager;\n"]},"metadata":{},"sourceType":"module"}