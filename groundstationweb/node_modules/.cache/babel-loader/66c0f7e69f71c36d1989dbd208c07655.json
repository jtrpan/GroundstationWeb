{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\DataArea\\\\components\\\\DataDisplay.jsx\";\nimport React, { Component } from 'react';\n\nclass DataDisplay extends Component {\n  render() {\n    const currentData = this.props.currentData;\n    const flightData = currentData.flightData;\n\n    if (!currentData) {\n      return React.createElement(\"div\", {\n        style: {\n          color: \"grey\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, \"No Flight Data received\");\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        minWidth: \"320px\",\n        overflow: \"hidden\",\n        fontSize: \"12pt\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      id: \"flight_data_table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Latitude\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"\".concat(Math.round(currentData.latitude * 100000) / 100000, \"\\xBA\"))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Longitude\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"\".concat(Math.round(currentData.longitude * 100000) / 100000, \"\\xBA\"))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Relative Direction\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"\".concat(Math.round(currentData.direction * 100000) / 100000, \"\\xBA\"))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Altitude GPS (ft)\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, Math.round(currentData.altitude * 100) / 100)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Velocity (m/s)\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, Math.round(currentData.velocity * 100) / 100)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Headwind (m/s)\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, Math.round(currentData.headwind * 100) / 100)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"TimeElapsed\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, currentData.timeElapsed)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Payload Prediction (ft)\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, Math.round(currentData.payloadPredictionDistance * 1000) / 1000)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"CDA Prediction(ft)\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, Math.round(currentData.CDAPredictionDistance * 1000) / 1000)))));\n  }\n\n}\n\nexport default DataDisplay;","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/components/DataArea/components/DataDisplay.jsx"],"names":["React","Component","DataDisplay","render","currentData","props","flightData","color","minWidth","overflow","fontSize","Math","round","latitude","longitude","direction","altitude","velocity","headwind","timeElapsed","payloadPredictionDistance","CDAPredictionDistance"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DataDisplay extends Component {\r\n  render() {\r\n    const { currentData } = this.props;\r\n    const { flightData } = currentData;\r\n    if (!currentData) {\r\n      return (\r\n          <div style={{ color: \"grey\" }}>\r\n            No Flight Data received\r\n          </div>\r\n      );\r\n    }\r\n    return (\r\n        <div style={{ minWidth: \"320px\", overflow: \"hidden\", fontSize: \"12pt\" }}>\r\n          <table id=\"flight_data_table\">\r\n            <tbody>\r\n            <tr>\r\n              <td>Latitude</td>\r\n              <td>{`${Math.round(currentData.latitude*100000)/100000}ยบ`}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Longitude</td>\r\n              <td>{`${Math.round(currentData.longitude*100000)/100000}ยบ`}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Relative Direction</td>\r\n              <td>{`${Math.round(currentData.direction * 100000) / 100000}ยบ`}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Altitude GPS (ft)</td>\r\n              <td>{Math.round(currentData.altitude*100)/100}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Velocity (m/s)</td>\r\n              <td>{Math.round(currentData.velocity*100)/100}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Headwind (m/s)</td>\r\n              <td>{Math.round(currentData.headwind*100)/100}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>TimeElapsed</td>\r\n              <td>{currentData.timeElapsed}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Payload Prediction (ft)</td>\r\n              <td>{Math.round(currentData.payloadPredictionDistance * 1000) / 1000 }</td>\r\n            </tr>\r\n            <tr>\r\n              <td>CDA Prediction(ft)</td>\r\n              <td>{Math.round(currentData.CDAPredictionDistance * 1000) / 1000}</td>\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataDisplay;\r\n"]},"metadata":{},"sourceType":"module"}