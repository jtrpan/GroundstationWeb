{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\DropArea\\\\components\\\\Dropper.jsx\";\nimport React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\"; // eslint-disable-next-line no-unused-vars\n\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\n\nclass Dropper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false\n    };\n\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({\n          connected: true\n        });\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receivedData(e.data);\n      };\n\n      connection.onclose = () => {\n        this.setState({\n          connected: false\n        });\n        console.info(\"Disconnected from server\");\n      };\n\n      this.connection = connection;\n    };\n\n    this.sendData = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const action = JSON.stringify({\n        type: \"action\",\n        action: \"drop-2\"\n      });\n      console.info(\"Sending:\", action);\n      this.connection.send(action);\n    };\n\n    this.ping = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n\n      const testVal = JSON.stringify({\n        type: \"test\",\n        test: \"This is a test.\"\n      });\n      console.info(\"Sending:\", testVal);\n      this.connection.send(testVal);\n    };\n\n    this.connect();\n  }\n\n  render() {\n    const connected = this.state.connected;\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h5\",\n      style: {\n        marginBottom: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Communication:\"), React.createElement(\"div\", {\n      style: {\n        color: \"grey\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Connection status:\\xA0\", connected ? React.createElement(\"strong\", {\n      style: {\n        color: \"limegreen\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Connected\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      style: {\n        color: \"firebrick\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Not Connected\"), \"\\xA0\", React.createElement(Icon, {\n      link: true,\n      name: \"sync\",\n      onClick: this.connect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(Button, {\n      icon: \"send\",\n      content: \"Ping [not implemented]\",\n      fluid: true,\n      basic: true,\n      onClick: this.ping,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Dropper;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/DropArea/components/Dropper.jsx"],"names":["React","Component","Segment","Header","Icon","Button","localServer","remoteServer","server","Dropper","constructor","props","state","connected","connect","console","info","connection","WebSocket","onopen","setState","onerror","error","onmessage","e","receivedData","data","onclose","sendData","warn","action","JSON","stringify","type","send","ping","testVal","test","render","marginBottom","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\n\n// eslint-disable-next-line no-unused-vars\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\nconst server = remoteServer;\n\nclass Dropper extends Component {\n  constructor(props) {\n    super(props);\n    this.connect();\n  }\n\n    state = {\n      connected: false,\n    };\n\n    connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n      connection.onopen = () => {\n        this.setState({ connected: true });\n        console.info(\"Connected to server\");\n      };\n      connection.onerror = (error) => {\n        console.info(\"Connection error\", error);\n      };\n      connection.onmessage = (e) => {\n        this.receivedData(e.data);\n      };\n      connection.onclose = () => {\n        this.setState({ connected: false });\n        console.info(\"Disconnected from server\");\n      };\n      this.connection = connection;\n    };\n\n    sendData = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n      const action = JSON.stringify(\n        {\n          type: \"action\",\n          action: \"drop-2\",\n        },\n      );\n      console.info(\"Sending:\", action);\n      this.connection.send(action);\n    };\n\n    ping = () => {\n      const { connected } = this.state;\n      if (!connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n      const testVal = JSON.stringify(\n        {\n          type: \"test\",\n          test: \"This is a test.\",\n        },\n      );\n      console.info(\"Sending:\", testVal);\n      this.connection.send(testVal);\n    };\n\n    render() {\n      const { connected } = this.state;\n      return (\n        <Segment>\n          <Header as=\"h5\" style={{ marginBottom: \"0px\" }}>Communication:</Header>\n          <div style={{ color: \"grey\" }}>\n                    Connection status:&nbsp;\n            {connected ? (\n              <strong style={{ color: \"limegreen\" }}>Connected</strong>\n            ): (\n              <span>\n                <strong style={{ color: \"firebrick\" }}>Not Connected</strong>\n                            &nbsp;\n                <Icon link name=\"sync\" onClick={this.connect} />\n              </span>\n\n            )}\n            <Button icon=\"send\" content=\"Ping [not implemented]\" fluid basic onClick={this.ping} />\n          </div>\n        </Segment>\n      );\n    }\n}\n\nexport default Dropper;\n"]},"metadata":{},"sourceType":"module"}