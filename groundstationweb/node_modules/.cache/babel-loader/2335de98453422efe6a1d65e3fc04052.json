{"ast":null,"code":"// eslint-disable-next-line no-unused-vars\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\n\nclass WebSocketManager {\n  constructor(setData, setConnected, getConnected) {\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      this.connection = new WebSocket(server);\n\n      this.connection.onopen = () => {\n        this.setConnected(true);\n        console.info(\"Connected to server\", this.getConnected);\n      };\n\n      this.connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        this.connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      this.connection.onmessage = e => {\n        this.receiveData(e.data);\n      };\n\n      this.connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n        this.setConnected(false);\n      };\n    };\n\n    this.receiveData = rawData => {\n      this.setData(rawData);\n    };\n\n    this.testData = () => {\n      if (!this.getConnected()) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    this.release = identity => {\n      if (!this.getConnected()) {\n        console.warn(\"Cannot drop. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"command\",\n        command: {\n          // drop details\n          object: identity\n        }\n      });\n      console.info(\"Sending drop signal:\", message);\n      this.connection.send(message);\n    };\n\n    this.setData = setData;\n    this.setConnected = setConnected;\n    this.getConnected = getConnected;\n    this.connect();\n  }\n  /*\r\n    check = () => {\r\n      const { this.connection } = this.state;\r\n      if (!connection || this.connection.readyState == WebSocket.CLOSED) this.connect();\r\n    };\r\n      ping = () => {\r\n      if (!this.getConnected()) {\r\n        console.warn(\"Cannot ping. Not connected\");\r\n        return;\r\n      }\r\n      const message = JSON.stringify(\r\n        {\r\n          type: \"command\",\r\n          command: {\r\n            // ping\r\n          },\r\n        },\r\n      );\r\n      console.info(\"Pinging:\", message);\r\n      this.connection.send(message);\r\n    };\r\n      */\n\n\n}\n\nexport default WebSocketManager;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/helpers/WebSocketManager.js"],"names":["localServer","remoteServer","server","WebSocketManager","constructor","setData","setConnected","getConnected","connect","console","info","connection","WebSocket","onopen","onerror","error","message","close","onmessage","e","receiveData","data","onclose","rawData","testData","warn","JSON","stringify","type","flightData","latitude","Math","random","longitude","altitude","velocity","headwind","send","release","identity","command","object"],"mappings":"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","sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nconst localServer = \"ws://localhost:8888\";\r\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\r\nconst server = remoteServer;\r\n\r\nclass WebSocketManager {\r\n  constructor(setData, setConnected, getConnected) {\r\n    this.setData = setData;\r\n    this.setConnected = setConnected;\r\n    this.getConnected = getConnected;\r\n    this.connect();\r\n  }\r\n\r\n    connect = () => {\r\n      console.info(\"Connecting....\");\r\n      this.connection = new WebSocket(server);\r\n\r\n      this.connection.onopen = () => {\r\n        this.setConnected(true);\r\n        console.info(\"Connected to server\", this.getConnected);\r\n      };\r\n\r\n      this.connection.onerror = (error) => {\r\n        console.error(\r\n          \"Socket encountered error: \",\r\n          error.message,\r\n          \"Closing socket\",\r\n        );\r\n        this.connection.close();\r\n        console.info(\"Connection error\", error);\r\n      };\r\n      this.connection.onmessage = (e) => {\r\n        this.receiveData(e.data);\r\n      };\r\n      this.connection.onclose = () => {\r\n        console.info(\"Disconnected from server\");\r\n        this.setConnected(false);\r\n      };\r\n    };\r\n\r\n  receiveData = (rawData) => {\r\n    this.setData(rawData);\r\n  };\r\n\r\n    testData = () => {\r\n      if (!this.getConnected()) {\r\n        console.warn(\"Cannot send. Not connected\");\r\n        return;\r\n      }\r\n      const data = JSON.stringify(\r\n        {\r\n          type: \"data\",\r\n          flightData: {\r\n            latitude: 49.258063+Math.random()*0.00111,\r\n            longitude: -123.195911+Math.random()*0.00111,\r\n            altitude: 45.3,\r\n            velocity: 10.3,\r\n            headwind: -0.9,\r\n          },\r\n        },\r\n      );\r\n      console.info(\"Sending test data:\", data);\r\n      this.connection.send(data);\r\n    };\r\n\r\n  release = (identity) => {\r\n    if (!this.getConnected()) {\r\n      console.warn(\"Cannot drop. Not connected\");\r\n      return;\r\n    }\r\n    const message = JSON.stringify(\r\n      {\r\n        type: \"command\",\r\n        command: {\r\n          // drop details\r\n          object: identity,\r\n        },\r\n      },\r\n    );\r\n    console.info(\"Sending drop signal:\", message);\r\n    this.connection.send(message);\r\n  };\r\n\r\n  /*\r\n    check = () => {\r\n      const { this.connection } = this.state;\r\n      if (!connection || this.connection.readyState == WebSocket.CLOSED) this.connect();\r\n    };\r\n\r\n    ping = () => {\r\n      if (!this.getConnected()) {\r\n        console.warn(\"Cannot ping. Not connected\");\r\n        return;\r\n      }\r\n      const message = JSON.stringify(\r\n        {\r\n          type: \"command\",\r\n          command: {\r\n            // ping\r\n          },\r\n        },\r\n      );\r\n      console.info(\"Pinging:\", message);\r\n      this.connection.send(message);\r\n    };\r\n\r\n    */\r\n}\r\nexport default WebSocketManager;\r\n"]},"metadata":{},"sourceType":"module"}