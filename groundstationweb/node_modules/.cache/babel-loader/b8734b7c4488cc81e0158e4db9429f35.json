{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\GroundStation\\\\index.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\nimport { predictCDA, predictPayload } from \"../../helpers/predictions\";\nimport { getDirection } from \"../../helpers/direction\";\nimport { predictLoc } from \"../../helpers/location\";\n\nclass GroundStation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentData: {\n        // set an initial state for everything\n        latitude: 0,\n        longitude: 0,\n        altitude: 0,\n        bearing: 0,\n        direction: 0,\n        velocity: 0,\n        headwind: 0,\n        payloadLatLong: [0, 0],\n        cdaLatLong: [0, 0],\n        cargoDropped: false,\n        cdaDropped: false,\n        CDAPredictionDistance: 0,\n        payloadPredictionDistance: 0\n      },\n      isConnected: false,\n      cargoDropped: false,\n      oneDropped: false,\n      twoDropped: false\n    };\n    this.dataLog = [];\n    this.planePositionHistory = [];\n\n    this.setDropped = (drop, value) => {\n      const change = {};\n      change[drop] = value;\n      this.setState(change);\n    };\n\n    this.setData = rawData => {\n      const data = JSON.parse(rawData);\n      const time = +Date.now();\n      const timeElapsed = time - this.state.lastPacketTime;\n      const _this$state = this.state,\n            currentData = _this$state.currentData,\n            cargoDropped = _this$state.cargoDropped,\n            oneDropped = _this$state.oneDropped,\n            twoDropped = _this$state.twoDropped;\n      data.timeElapsed = timeElapsed;\n      this.state.lastPacketTime = time;\n\n      if (data.flightData) {\n        const flightData = _objectSpread({}, currentData, {}, data.flightData); // merge old data with new data\n\n\n        flightData.timeRecieved = time / 1000 || 0;\n        flightData.payloadPredictionDistance = predictPayload(flightData.altitude, flightData.velocity, flightData.headwind);\n        flightData.CDAPredictionDistance = predictCDA(flightData.altitude, flightData.velocity, flightData.headwind);\n        flightData.direction = getDirection(currentData, flightData);\n        flightData.payloadLatLong = predictLoc(flightData, flightData.payloadPredictionDistance);\n        flightData.cdaLatLong = predictLoc(flightData, flightData.CDAPredictionDistance);\n        flightData.cargoDropped = cargoDropped;\n        flightData.oneDropped = oneDropped;\n        flightData.twoDropped = twoDropped;\n        this.planePositionHistory.push([flightData.latitude, flightData.longitude]);\n        this.dataLog.push(data.flightData);\n        this.setState({\n          currentData: flightData\n        });\n      }\n    };\n\n    this.setConnected = isConnected => {\n      this.setState({\n        isConnected\n      });\n    };\n\n    this.getConnected = () => {\n      return this.state.isConnected;\n    };\n\n    this.webSocketManager = new WebSocketManager(this.setData, this.setConnected, this.getConnected);\n\n    this.clearDataLog = () => {\n      this.dataLog = [];\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          currentData = _this$state2.currentData,\n          isConnected = _this$state2.isConnected,\n          cargoDropped = _this$state2.cargoDropped,\n          oneDropped = _this$state2.oneDropped,\n          twoDropped = _this$state2.twoDropped;\n    return React.createElement(\"div\", {\n      style: {\n        paddingLeft: 0,\n        paddingBottom: \"1em\",\n        paddingTop: \"1em\",\n        border: \"none\",\n        height: \"100%\",\n        boxSizing: \"content-box\",\n        paddingRight: 0,\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        height: \"calc(100% - 2em)\",\n        overflow: \"hidden\",\n        overflowX: \"auto\",\n        paddingBottom: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(MapArea, {\n      currentData: currentData,\n      planePositionHistory: this.planePositionHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(DataArea, {\n      dataLog: this.dataLog,\n      saveLog: this.saveDataLog,\n      clearLog: this.clearDataLog,\n      receiveData: this.receiveData,\n      currentData: currentData,\n      webSocketManager: this.webSocketManager,\n      isConnected: isConnected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(DropArea, {\n      currentData: currentData,\n      webSocketManager: this.webSocketManager,\n      isConnected: isConnected,\n      cargoDropped: cargoDropped,\n      oneDropped: oneDropped,\n      twoDropped: twoDropped,\n      setDropped: this.setDropped,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GroundStation;","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/components/GroundStation/index.jsx"],"names":["React","Component","MapArea","DataArea","DropArea","WebSocketManager","predictCDA","predictPayload","getDirection","predictLoc","GroundStation","state","currentData","latitude","longitude","altitude","bearing","direction","velocity","headwind","payloadLatLong","cdaLatLong","cargoDropped","cdaDropped","CDAPredictionDistance","payloadPredictionDistance","isConnected","oneDropped","twoDropped","dataLog","planePositionHistory","setDropped","drop","value","change","setState","setData","rawData","data","JSON","parse","time","Date","now","timeElapsed","lastPacketTime","flightData","timeRecieved","push","setConnected","getConnected","webSocketManager","clearDataLog","render","paddingLeft","paddingBottom","paddingTop","border","height","boxSizing","paddingRight","maxWidth","display","overflow","overflowX","saveDataLog","receiveData"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,2BAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,2BAA3C;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAGA,MAAMC,aAAN,SAA4BT,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACpCU,KADoC,GAC5B;AACNC,MAAAA,WAAW,EAAE;AAAE;AACbC,QAAAA,QAAQ,EAAE,CADC;AAEXC,QAAAA,SAAS,EAAE,CAFA;AAGXC,QAAAA,QAAQ,EAAE,CAHC;AAIXC,QAAAA,OAAO,EAAE,CAJE;AAKXC,QAAAA,SAAS,EAAE,CALA;AAMXC,QAAAA,QAAQ,EAAE,CANC;AAOXC,QAAAA,QAAQ,EAAE,CAPC;AAQXC,QAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,CAAJ,CARL;AASXC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CATD;AAUXC,QAAAA,YAAY,EAAE,KAVH;AAWXC,QAAAA,UAAU,EAAE,KAXD;AAYXC,QAAAA,qBAAqB,EAAE,CAZZ;AAaXC,QAAAA,yBAAyB,EAAE;AAbhB,OADP;AAgBNC,MAAAA,WAAW,EAAE,KAhBP;AAiBNJ,MAAAA,YAAY,EAAE,KAjBR;AAkBNK,MAAAA,UAAU,EAAE,KAlBN;AAmBNC,MAAAA,UAAU,EAAE;AAnBN,KAD4B;AAAA,SAuBpCC,OAvBoC,GAuB1B,EAvB0B;AAAA,SAyBpCC,oBAzBoC,GAyBb,EAzBa;;AAAA,SA2BpCC,UA3BoC,GA2BvB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,YAAMC,MAAM,GAAG,EAAf;AACAA,MAAAA,MAAM,CAACF,IAAD,CAAN,GAAeC,KAAf;AACA,WAAKE,QAAL,CAAcD,MAAd;AACD,KA/BmC;;AAAA,SAiCpCE,OAjCoC,GAiCzBC,OAAD,IAAa;AACrB,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAb;AACA,YAAMI,IAAI,GAAG,CAACC,IAAI,CAACC,GAAL,EAAd;AACA,YAAMC,WAAW,GAAGH,IAAI,GAAG,KAAK9B,KAAL,CAAWkC,cAAtC;AAHqB,0BAIyC,KAAKlC,KAJ9C;AAAA,YAIbC,WAJa,eAIbA,WAJa;AAAA,YAIAU,YAJA,eAIAA,YAJA;AAAA,YAIcK,UAJd,eAIcA,UAJd;AAAA,YAI0BC,UAJ1B,eAI0BA,UAJ1B;AAKrBU,MAAAA,IAAI,CAACM,WAAL,GAAmBA,WAAnB;AACA,WAAKjC,KAAL,CAAWkC,cAAX,GAA4BJ,IAA5B;;AACA,UAAIH,IAAI,CAACQ,UAAT,EAAqB;AACnB,cAAMA,UAAU,qBAAQlC,WAAR,MAAwB0B,IAAI,CAACQ,UAA7B,CAAhB,CADmB,CACwC;;;AAC3DA,QAAAA,UAAU,CAACC,YAAX,GAA2BN,IAAI,GAAG,IAAR,IAAiB,CAA3C;AAEAK,QAAAA,UAAU,CAACrB,yBAAX,GAAuClB,cAAc,CAACuC,UAAU,CAAC/B,QAAZ,EAAsB+B,UAAU,CAAC5B,QAAjC,EAA2C4B,UAAU,CAAC3B,QAAtD,CAArD;AACA2B,QAAAA,UAAU,CAACtB,qBAAX,GAAmClB,UAAU,CAACwC,UAAU,CAAC/B,QAAZ,EAAsB+B,UAAU,CAAC5B,QAAjC,EAA2C4B,UAAU,CAAC3B,QAAtD,CAA7C;AAEA2B,QAAAA,UAAU,CAAC7B,SAAX,GAAuBT,YAAY,CAACI,WAAD,EAAckC,UAAd,CAAnC;AAEAA,QAAAA,UAAU,CAAC1B,cAAX,GAA4BX,UAAU,CAACqC,UAAD,EAAaA,UAAU,CAACrB,yBAAxB,CAAtC;AACAqB,QAAAA,UAAU,CAACzB,UAAX,GAAwBZ,UAAU,CAACqC,UAAD,EAAaA,UAAU,CAACtB,qBAAxB,CAAlC;AAEAsB,QAAAA,UAAU,CAACxB,YAAX,GAA0BA,YAA1B;AACAwB,QAAAA,UAAU,CAACnB,UAAX,GAAwBA,UAAxB;AACAmB,QAAAA,UAAU,CAAClB,UAAX,GAAwBA,UAAxB;AAEA,aAAKE,oBAAL,CAA0BkB,IAA1B,CAA+B,CAACF,UAAU,CAACjC,QAAZ,EAAsBiC,UAAU,CAAChC,SAAjC,CAA/B;AACA,aAAKe,OAAL,CAAamB,IAAb,CAAkBV,IAAI,CAACQ,UAAvB;AACA,aAAKX,QAAL,CAAc;AAAEvB,UAAAA,WAAW,EAAEkC;AAAf,SAAd;AACD;AACF,KA5DmC;;AAAA,SA8DpCG,YA9DoC,GA8DpBvB,WAAD,IAAiB;AAC9B,WAAKS,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd;AACD,KAhEmC;;AAAA,SAkEpCwB,YAlEoC,GAkErB,MAAM;AACnB,aAAO,KAAKvC,KAAL,CAAWe,WAAlB;AACD,KApEmC;;AAAA,SAsEpCyB,gBAtEoC,GAsEjB,IAAI9C,gBAAJ,CAAqB,KAAK+B,OAA1B,EAAmC,KAAKa,YAAxC,EAAsD,KAAKC,YAA3D,CAtEiB;;AAAA,SAwEpCE,YAxEoC,GAwErB,MAAM;AACnB,WAAKvB,OAAL,GAAe,EAAf;AACD,KA1EmC;AAAA;;AA4EpCwB,EAAAA,MAAM,GAAG;AAAA,yBACoE,KAAK1C,KADzE;AAAA,UACCC,WADD,gBACCA,WADD;AAAA,UACcc,WADd,gBACcA,WADd;AAAA,UAC2BJ,YAD3B,gBAC2BA,YAD3B;AAAA,UACyCK,UADzC,gBACyCA,UADzC;AAAA,UACqDC,UADrD,gBACqDA,UADrD;AAEP,WACE;AACE,MAAA,KAAK,EAAE;AACL0B,QAAAA,WAAW,EAAE,CADR;AAELC,QAAAA,aAAa,EAAE,KAFV;AAGLC,QAAAA,UAAU,EAAE,KAHP;AAILC,QAAAA,MAAM,EAAE,MAJH;AAKLC,QAAAA,MAAM,EAAE,MALH;AAMLC,QAAAA,SAAS,EAAE,aANN;AAOLC,QAAAA,YAAY,EAAE,CAPT;AAQLC,QAAAA,QAAQ,EAAE;AARL,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBJ,QAAAA,MAAM,EAAE,kBAA3B;AAA+CK,QAAAA,QAAQ,EAAE,QAAzD;AAAmEC,QAAAA,SAAS,EAAE,MAA9E;AAAsFT,QAAAA,aAAa,EAAE;AAArG,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,WAAW,EAAE3C,WAAtB;AAAmC,MAAA,oBAAoB,EAAE,KAAKkB,oBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AACE,MAAA,OAAO,EAAE,KAAKD,OADhB;AAEE,MAAA,OAAO,EAAE,KAAKoC,WAFhB;AAGE,MAAA,QAAQ,EAAE,KAAKb,YAHjB;AAIE,MAAA,WAAW,EAAE,KAAKc,WAJpB;AAKE,MAAA,WAAW,EAAEtD,WALf;AAME,MAAA,gBAAgB,EAAE,KAAKuC,gBANzB;AAOE,MAAA,WAAW,EAAEzB,WAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAWE,oBAAC,QAAD;AACE,MAAA,WAAW,EAAEd,WADf;AAEE,MAAA,gBAAgB,EAAE,KAAKuC,gBAFzB;AAGE,MAAA,WAAW,EAAEzB,WAHf;AAIE,MAAA,YAAY,EAAEJ,YAJhB;AAKE,MAAA,UAAU,EAAEK,UALd;AAME,MAAA,UAAU,EAAEC,UANd;AAOE,MAAA,UAAU,EAAE,KAAKG,UAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CAZF,CADF;AAoCD;;AAlHmC;;AAqHtC,eAAerB,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\nimport { predictCDA, predictPayload } from \"../../helpers/predictions\";\nimport { getDirection } from \"../../helpers/direction\";\nimport { predictLoc } from \"../../helpers/location\";\n\n\nclass GroundStation extends Component {\n  state = {\n    currentData: { // set an initial state for everything\n      latitude: 0,\n      longitude: 0,\n      altitude: 0,\n      bearing: 0,\n      direction: 0,\n      velocity: 0,\n      headwind: 0,\n      payloadLatLong: [0, 0],\n      cdaLatLong: [0, 0],\n      cargoDropped: false,\n      cdaDropped: false,\n      CDAPredictionDistance: 0,\n      payloadPredictionDistance: 0,\n    },\n    isConnected: false,\n    cargoDropped: false,\n    oneDropped: false,\n    twoDropped: false,\n  };\n\n  dataLog = [];\n\n  planePositionHistory = [];\n\n  setDropped = (drop, value) => {\n    const change = {};\n    change[drop] = value;\n    this.setState(change);\n  };\n\n  setData = (rawData) => {\n    const data = JSON.parse(rawData);\n    const time = +Date.now();\n    const timeElapsed = time - this.state.lastPacketTime;\n    const { currentData, cargoDropped, oneDropped, twoDropped } = this.state;\n    data.timeElapsed = timeElapsed;\n    this.state.lastPacketTime = time;\n    if (data.flightData) {\n      const flightData = { ...currentData, ...data.flightData }; // merge old data with new data\n      flightData.timeRecieved = (time / 1000) || 0;\n\n      flightData.payloadPredictionDistance = predictPayload(flightData.altitude, flightData.velocity, flightData.headwind);\n      flightData.CDAPredictionDistance = predictCDA(flightData.altitude, flightData.velocity, flightData.headwind);\n\n      flightData.direction = getDirection(currentData, flightData);\n\n      flightData.payloadLatLong = predictLoc(flightData, flightData.payloadPredictionDistance);\n      flightData.cdaLatLong = predictLoc(flightData, flightData.CDAPredictionDistance);\n\n      flightData.cargoDropped = cargoDropped;\n      flightData.oneDropped = oneDropped;\n      flightData.twoDropped = twoDropped;\n\n      this.planePositionHistory.push([flightData.latitude, flightData.longitude]);\n      this.dataLog.push(data.flightData);\n      this.setState({ currentData: flightData });\n    }\n  }\n\n  setConnected = (isConnected) => {\n    this.setState({ isConnected });\n  }\n\n  getConnected = () => {\n    return this.state.isConnected;\n  }\n\n  webSocketManager = new WebSocketManager(this.setData, this.setConnected, this.getConnected);\n\n  clearDataLog = () => {\n    this.dataLog = [];\n  };\n\n  render() {\n    const { currentData, isConnected, cargoDropped, oneDropped, twoDropped } = this.state;\n    return (\n      <div\n        style={{\n          paddingLeft: 0,\n          paddingBottom: \"1em\",\n          paddingTop: \"1em\",\n          border: \"none\",\n          height: \"100%\",\n          boxSizing: \"content-box\",\n          paddingRight: 0,\n          maxWidth: \"100%\",\n        }}\n      >\n        <div style={{ display: \"flex\", height: \"calc(100% - 2em)\", overflow: \"hidden\", overflowX: \"auto\", paddingBottom: \"1em\" }}>\n          <MapArea currentData={currentData} planePositionHistory={this.planePositionHistory} />\n          <DataArea\n            dataLog={this.dataLog}\n            saveLog={this.saveDataLog}\n            clearLog={this.clearDataLog}\n            receiveData={this.receiveData}\n            currentData={currentData}\n            webSocketManager={this.webSocketManager}\n            isConnected={isConnected}\n          />\n          <DropArea\n            currentData={currentData}\n            webSocketManager={this.webSocketManager}\n            isConnected={isConnected}\n            cargoDropped={cargoDropped}\n            oneDropped={oneDropped}\n            twoDropped={twoDropped}\n            setDropped={this.setDropped}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GroundStation;\n"]},"metadata":{},"sourceType":"module"}