{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\MapArea\\\\components\\\\AeroMap.jsx\";\nimport React, { Component } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport \"../css/resize.css\";\n\nclass AeroMap extends Component {\n  render() {\n    const _this$props = this.props,\n          planeLat = _this$props.planeLat,\n          planeLong = _this$props.planeLong,\n          mapLat = _this$props.mapLat,\n          mapLong = _this$props.mapLong,\n          targLat = _this$props.targLat,\n          targLng = _this$props.targLng,\n          zoom = _this$props.zoom,\n          drawPlane = _this$props.drawPlane,\n          drawTarget = _this$props.drawTarget,\n          drawCDAPredictionPoint = _this$props.drawCDAPredictionPoint,\n          drawPayloadPredictionPoint = _this$props.drawPayloadPredictionPoint,\n          drawPlanePositionHistory = _this$props.drawPlanePositionHistory,\n          payloadLat = _this$props.payloadLat,\n          payloadLong = _this$props.payloadLong,\n          cdaLat = _this$props.cdaLat,\n          cdaLong = _this$props.cdaLong,\n          planePositionHistory = _this$props.planePositionHistory;\n    const polygons = [];\n    const polyline = {\n      location: drawPlanePositionHistory ? planePositionHistory : [],\n      option: {\n        strokeColor: \"white\",\n        strokeThickness: 2\n      }\n    };\n\n    if (drawPlane) {\n      polygons.push({\n        center: [planeLat, planeLong],\n        radius: 0.0015,\n        points: 20,\n        option: {\n          fillColor: \"#DC143C\",\n          strokeThickness: 2\n        }\n      });\n    }\n\n    if (drawTarget) {\n      polygons.push({\n        center: [targLat, targLng],\n        radius: 0.0094697,\n        // 50 feet = 0.0094697 miles\n        points: 80,\n        option: {\n          strokeColor: \"#ff0000\",\n          strokeThickness: 1,\n          strokeDashArray: [1, 2]\n        }\n      });\n    }\n\n    if (drawPayloadPredictionPoint) {\n      polygons.push({\n        center: [payloadLat, payloadLong],\n        // paints predicted payload location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"purple\",\n          strokeThickness: 2\n        }\n      });\n    }\n\n    if (drawCDAPredictionPoint) {\n      polygons.push({\n        center: [cdaLat, cdaLong],\n        // paints predicted CDA Location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"blue\",\n          strokeThickness: 2\n        }\n      });\n    } // let coordinates = [payloadLat, payloadLong],[cdaLat, cdaLong];\n\n\n    const height = window.innerHeight - 28;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(ResizableBox, {\n      width: 600,\n      height: height,\n      axis: \"x\",\n      handleSize: [20, 20],\n      minConstraints: [100, height],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"#999\",\n        width: \"100%\",\n        height: \"100%\",\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(ReactBingmaps, {\n      bingmapKey: \"AszsKaHJ3M1aGYwWB85QjTHkpEs8wTow6nOYAzOMDxOCopJSupN6RLCPkbVR42jF\",\n      disableStreetside: true,\n      center: [mapLat, mapLong],\n      zoom: zoom,\n      polyline: polyline,\n      regularPolygons: polygons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default AeroMap;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/MapArea/components/AeroMap.jsx"],"names":["React","Component","ResizableBox","ReactBingmaps","AeroMap","render","props","planeLat","planeLong","mapLat","mapLong","targLat","targLng","zoom","drawPlane","drawTarget","drawCDAPredictionPoint","drawPayloadPredictionPoint","drawPlanePositionHistory","payloadLat","payloadLong","cdaLat","cdaLong","planePositionHistory","polygons","polyline","location","option","strokeColor","strokeThickness","push","center","radius","points","fillColor","strokeDashArray","height","window","innerHeight","backgroundColor","width","overflow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAO,mBAAP;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC9BI,EAAAA,MAAM,GAAG;AAAA,wBAmBH,KAAKC,KAnBF;AAAA,UAELC,QAFK,eAELA,QAFK;AAAA,UAGLC,SAHK,eAGLA,SAHK;AAAA,UAILC,MAJK,eAILA,MAJK;AAAA,UAKLC,OALK,eAKLA,OALK;AAAA,UAMLC,OANK,eAMLA,OANK;AAAA,UAOLC,OAPK,eAOLA,OAPK;AAAA,UAQLC,IARK,eAQLA,IARK;AAAA,UASLC,SATK,eASLA,SATK;AAAA,UAULC,UAVK,eAULA,UAVK;AAAA,UAWLC,sBAXK,eAWLA,sBAXK;AAAA,UAYLC,0BAZK,eAYLA,0BAZK;AAAA,UAaLC,wBAbK,eAaLA,wBAbK;AAAA,UAcLC,UAdK,eAcLA,UAdK;AAAA,UAeLC,WAfK,eAeLA,WAfK;AAAA,UAgBLC,MAhBK,eAgBLA,MAhBK;AAAA,UAiBLC,OAjBK,eAiBLA,OAjBK;AAAA,UAkBLC,oBAlBK,eAkBLA,oBAlBK;AAqBP,UAAMC,QAAQ,GAAG,EAAjB;AAEA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,QAAQ,EAAER,wBAAwB,GAAGK,oBAAH,GAA0B,EAD7C;AAEfI,MAAAA,MAAM,EAAE;AAAEC,QAAAA,WAAW,EAAE,OAAf;AACNC,QAAAA,eAAe,EAAE;AADX;AAFO,KAAjB;;AAMA,QAAIf,SAAJ,EAAe;AACbU,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACxB,QAAD,EAAWC,SAAX,CADI;AAEZwB,QAAAA,MAAM,EAAE,MAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZN,QAAAA,MAAM,EAAE;AAAEO,UAAAA,SAAS,EAAE,SAAb;AAAwBL,UAAAA,eAAe,EAAE;AAAzC;AAJI,OAAd;AAMD;;AAED,QAAId,UAAJ,EAAgB;AACdS,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACpB,OAAD,EAAUC,OAAV,CADI;AAEZoB,QAAAA,MAAM,EAAE,SAFI;AAEO;AACnBC,QAAAA,MAAM,EAAE,EAHI;AAIZN,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE,SADP;AAENC,UAAAA,eAAe,EAAE,CAFX;AAGNM,UAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ;AAHX;AAJI,OAAd;AAUD;;AAED,QAAIlB,0BAAJ,EAAgC;AAC9BO,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACZ,UAAD,EAAaC,WAAb,CADI;AACuB;AACnCY,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZN,QAAAA,MAAM,EAAE;AAAEO,UAAAA,SAAS,EAAE,QAAb;AACNL,UAAAA,eAAe,EAAE;AADX;AAJI,OAAd;AAOD;;AAED,QAAIb,sBAAJ,EAA4B;AAC1BQ,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACV,MAAD,EAASC,OAAT,CADI;AACe;AAC3BU,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZN,QAAAA,MAAM,EAAE;AAAEO,UAAAA,SAAS,EAAE,MAAb;AACNL,UAAAA,eAAe,EAAE;AADX;AAJI,OAAd;AAOD,KArEM,CAwEP;;;AACA,UAAMO,MAAM,GAAGC,MAAM,CAACC,WAAP,GAAqB,EAApC;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAEF,MAFV;AAGE,MAAA,IAAI,EAAC,GAHP;AAIE,MAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,CAJd;AAKE,MAAA,cAAc,EAAE,CAAC,GAAD,EAAMA,MAAN,CALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAK,MAAA,KAAK,EAAE;AAAEG,QAAAA,eAAe,EAAE,MAAnB;AAA2BC,QAAAA,KAAK,EAAE,MAAlC;AAA0CJ,QAAAA,MAAM,EAAE,MAAlD;AAA0DK,QAAAA,QAAQ,EAAE;AAApE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACE,MAAA,UAAU,EAAC,kEADb;AAEE,MAAA,iBAAiB,MAFnB;AAGE,MAAA,MAAM,EAAE,CAAChC,MAAD,EAASC,OAAT,CAHV;AAIE,MAAA,IAAI,EAAEG,IAJR;AAKE,MAAA,QAAQ,EAAEY,QALZ;AAME,MAAA,eAAe,EAAED,QANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,CADF,CADF;AAsBD;;AAjG6B;;AAoGhC,eAAepB,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport \"../css/resize.css\";\n\nclass AeroMap extends Component {\n  render() {\n    const {\n      planeLat,\n      planeLong,\n      mapLat,\n      mapLong,\n      targLat,\n      targLng,\n      zoom,\n      drawPlane,\n      drawTarget,\n      drawCDAPredictionPoint,\n      drawPayloadPredictionPoint,\n      drawPlanePositionHistory,\n      payloadLat,\n      payloadLong,\n      cdaLat,\n      cdaLong,\n      planePositionHistory,\n    } = this.props;\n\n    const polygons = [];\n\n    const polyline = {\n      location: drawPlanePositionHistory ? planePositionHistory : [],\n      option: { strokeColor: \"white\",\n        strokeThickness: 2 },\n    };\n\n    if (drawPlane) {\n      polygons.push({\n        center: [planeLat, planeLong],\n        radius: 0.0015,\n        points: 20,\n        option: { fillColor: \"#DC143C\", strokeThickness: 2 },\n      });\n    }\n\n    if (drawTarget) {\n      polygons.push({\n        center: [targLat, targLng],\n        radius: 0.0094697, // 50 feet = 0.0094697 miles\n        points: 80,\n        option: {\n          strokeColor: \"#ff0000\",\n          strokeThickness: 1,\n          strokeDashArray: [1, 2],\n        },\n      });\n    }\n\n    if (drawPayloadPredictionPoint) {\n      polygons.push({\n        center: [payloadLat, payloadLong], // paints predicted payload location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: { fillColor: \"purple\",\n          strokeThickness: 2 },\n      });\n    }\n\n    if (drawCDAPredictionPoint) {\n      polygons.push({\n        center: [cdaLat, cdaLong], // paints predicted CDA Location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: { fillColor: \"blue\",\n          strokeThickness: 2 },\n      });\n    }\n\n\n    // let coordinates = [payloadLat, payloadLong],[cdaLat, cdaLong];\n    const height = window.innerHeight - 28;\n    return (\n      <div>\n        <ResizableBox\n          width={600}\n          height={height}\n          axis=\"x\"\n          handleSize={[20, 20]}\n          minConstraints={[100, height]}\n        >\n          <div style={{ backgroundColor: \"#999\", width: \"100%\", height: \"100%\", overflow: \"hidden\" }}>\n            <ReactBingmaps\n              bingmapKey=\"AszsKaHJ3M1aGYwWB85QjTHkpEs8wTow6nOYAzOMDxOCopJSupN6RLCPkbVR42jF\"\n              disableStreetside\n              center={[mapLat, mapLong]}\n              zoom={zoom}\n              polyline={polyline}\n              regularPolygons={polygons}\n            />\n          </div>\n        </ResizableBox>\n      </div>\n    );\n  }\n}\n\nexport default AeroMap;\n"]},"metadata":{},"sourceType":"module"}