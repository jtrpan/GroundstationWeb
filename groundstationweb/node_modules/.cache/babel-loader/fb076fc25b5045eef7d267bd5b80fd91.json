{"ast":null,"code":"const toDeg = rad => {\n  return rad * 180 / Math.PI;\n};\n\nconst toRad = angle => {\n  return angle * Math.PI / 180;\n}; // returns angle between last two positions, which depicts direction of plane's movement\n// Similar to relative bearing\n\n\nexport const getDirection = (oldData, newData) => {\n  if (oldData == null || oldData == null) return 0;\n  const newLat = toRad(newData.latitude);\n  const oldLat = toRad(oldData.latitude);\n  const newLong = toRad(newData.longitude);\n  const oldLong = toRad(oldData.longitude);\n  const y = Math.sin(newLong - oldLong) * Math.cos(newLat);\n  const x = Math.cos(oldLat) * Math.sin(newLat) - Math.sin(oldLat) * Math.cos(newLat) * Math.cos(newLong - oldLong);\n  const bearing = toDeg(Math.atan2(y, x));\n  return bearing;\n};","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/helpers/direction.js"],"names":["toDeg","rad","Math","PI","toRad","angle","getDirection","oldData","newData","newLat","latitude","oldLat","newLong","longitude","oldLong","y","sin","cos","x","bearing","atan2"],"mappings":"AAAA,MAAMA,KAAK,GAAIC,GAAD,IAAS;AACrB,SAAOA,GAAG,GAAG,GAAN,GAAYC,IAAI,CAACC,EAAxB;AACD,CAFD;;AAIA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,SAAOA,KAAK,GAAGH,IAAI,CAACC,EAAb,GAAkB,GAAzB;AACD,CAFD,C,CAIA;AACA;;;AACA,OAAO,MAAMG,YAAY,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAChD,MAAID,OAAO,IAAI,IAAX,IAAmBA,OAAO,IAAI,IAAlC,EAAwC,OAAO,CAAP;AAExC,QAAME,MAAM,GAAGL,KAAK,CAACI,OAAO,CAACE,QAAT,CAApB;AACA,QAAMC,MAAM,GAAGP,KAAK,CAACG,OAAO,CAACG,QAAT,CAApB;AACA,QAAME,OAAO,GAAGR,KAAK,CAACI,OAAO,CAACK,SAAT,CAArB;AACA,QAAMC,OAAO,GAAGV,KAAK,CAACG,OAAO,CAACM,SAAT,CAArB;AAEA,QAAME,CAAC,GAAGb,IAAI,CAACc,GAAL,CAASJ,OAAO,GAACE,OAAjB,IAA4BZ,IAAI,CAACe,GAAL,CAASR,MAAT,CAAtC;AACA,QAAMS,CAAC,GAAGhB,IAAI,CAACe,GAAL,CAASN,MAAT,IAAiBT,IAAI,CAACc,GAAL,CAASP,MAAT,CAAjB,GACFP,IAAI,CAACc,GAAL,CAASL,MAAT,IAAiBT,IAAI,CAACe,GAAL,CAASR,MAAT,CAAjB,GAAkCP,IAAI,CAACe,GAAL,CAASL,OAAO,GAAEE,OAAlB,CAD1C;AAEA,QAAMK,OAAO,GAAGnB,KAAK,CAACE,IAAI,CAACkB,KAAL,CAAWL,CAAX,EAAcG,CAAd,CAAD,CAArB;AAEA,SAAOC,OAAP;AACD,CAdM","sourcesContent":["const toDeg = (rad) => {\r\n  return rad * 180 / Math.PI;\r\n};\r\n\r\nconst toRad = (angle) => {\r\n  return angle * Math.PI / 180;\r\n};\r\n\r\n// returns angle between last two positions, which depicts direction of plane's movement\r\n// Similar to relative bearing\r\nexport const getDirection = (oldData, newData) => {\r\n  if (oldData == null || oldData == null) return 0;\r\n\r\n  const newLat = toRad(newData.latitude);\r\n  const oldLat = toRad(oldData.latitude);\r\n  const newLong = toRad(newData.longitude);\r\n  const oldLong = toRad(oldData.longitude);\r\n\r\n  const y = Math.sin(newLong-oldLong) * Math.cos(newLat);\r\n  const x = Math.cos(oldLat)*Math.sin(newLat)\r\n        - Math.sin(oldLat)*Math.cos(newLat)*Math.cos(newLong -oldLong);\r\n  const bearing = toDeg(Math.atan2(y, x));\r\n\r\n  return bearing;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}