{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\MapArea\\\\components\\\\AeroMap.jsx\";\nimport React, { Component } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport \"../css/resize.css\";\n\nclass AeroMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      predBaseLat: null,\n      predBaseLong: null,\n      predNextLat: null,\n      predNextLong: null,\n      resetBase: true\n    };\n\n    this.predictNext = (inLat, inLong) => {\n      const _this$props = this.props,\n            planeLat = _this$props.planeLat,\n            planeLong = _this$props.planeLong,\n            direction = _this$props.direction,\n            velocity = _this$props.velocity;\n      const resetBase = this.state.resetBase;\n\n      if (resetBase) {\n        this.setState({\n          predBaseLat: planeLat,\n          predBaseLong: planeLong\n        });\n        this.setState({\n          resetBase: false\n        });\n      } else {\n        this.setState({\n          predBaseLat: inLat,\n          predBaseLong: inLong\n        });\n      }\n\n      const nextLat = this.state.predBaseLat + direction + velocity;\n      const nextLong = this.state.predBaseLong + direction + velocity;\n      this.setState({\n        predNextLat: nextLat,\n        predNextLong: nextLong\n      });\n    };\n\n    this.detectUpdate = () => {};\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          planeLat = _this$props2.planeLat,\n          planeLong = _this$props2.planeLong,\n          mapLat = _this$props2.mapLat,\n          mapLong = _this$props2.mapLong,\n          targLat = _this$props2.targLat,\n          targLng = _this$props2.targLng,\n          zoom = _this$props2.zoom,\n          drawPlane = _this$props2.drawPlane,\n          smoothPlane = _this$props2.smoothPlane,\n          drawTarget = _this$props2.drawTarget,\n          drawCDAPredictionPoint = _this$props2.drawCDAPredictionPoint,\n          drawPayloadPredictionPoint = _this$props2.drawPayloadPredictionPoint,\n          drawPlanePositionHistory = _this$props2.drawPlanePositionHistory,\n          payloadLat = _this$props2.payloadLat,\n          payloadLong = _this$props2.payloadLong,\n          cdaLat = _this$props2.cdaLat,\n          cdaLong = _this$props2.cdaLong,\n          planePositionHistory = _this$props2.planePositionHistory;\n    const _this$state = this.state,\n          predNextLat = _this$state.predNextLat,\n          predNextLong = _this$state.predNextLong;\n    const polygons = [];\n    const polyline = {\n      location: drawPlanePositionHistory ? planePositionHistory : [],\n      option: {\n        strokeColor: \"rgba(255,255,255,0.7)\",\n        strokeThickness: 2.5,\n        strokeDashArray: [4, 4]\n      }\n    };\n\n    if (drawPlane) {\n      polygons.push({\n        center: [planeLat, planeLong],\n        radius: 0.002,\n        points: 20,\n        option: {\n          fillColor: \"rgba(230, 0, 0, 0.7)\",\n          strokeThickness: 2\n        }\n      });\n    }\n\n    if (smoothPlane) {\n      this.predictNext(this.state.predNextLat, this.state.predNextLong);\n      polygons.push({\n        center: [predNextLat, predNextLong],\n        radius: 0.002,\n        points: 20,\n        option: {\n          fillColor: \"rgba(255, 127, 80, 0.7)\",\n          strokeThickness: 2\n        }\n      });\n    }\n\n    if (drawTarget) {\n      polygons.push({\n        center: [targLat, targLng],\n        radius: 0.0094697,\n        // 50 feet = 0.0094697 miles\n        points: 80,\n        option: {\n          strokeColor: \"#ff0000\",\n          fillColor: \"rgba(84, 209, 71, 0.7)\",\n          strokeThickness: 2,\n          strokeDashArray: [1, 2]\n        }\n      });\n    }\n\n    if (drawPayloadPredictionPoint) {\n      polygons.push({\n        center: [payloadLat, payloadLong],\n        // paints predicted payload location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"rgba(104, 242, 233, 0.7)\",\n          strokeThickness: 1\n        }\n      });\n    }\n\n    if (drawCDAPredictionPoint) {\n      polygons.push({\n        center: [cdaLat, cdaLong],\n        // paints predicted CDA Location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"rgba(251, 189, 8, 0.7)\",\n          strokeThickness: 1\n        }\n      });\n    } // let coordinates = [payloadLat, payloadLong],[cdaLat, cdaLong];\n\n\n    const height = window.innerHeight - 31;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(ResizableBox, {\n      width: 600,\n      height: height,\n      axis: \"x\",\n      handleSize: [20, 20],\n      minConstraints: [100, height],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"#999\",\n        width: \"100%\",\n        height: \"100%\",\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(ReactBingmaps, {\n      bingmapKey: \"AszsKaHJ3M1aGYwWB85QjTHkpEs8wTow6nOYAzOMDxOCopJSupN6RLCPkbVR42jF\",\n      disableStreetside: true,\n      center: [mapLat, mapLong],\n      zoom: zoom,\n      polyline: polyline,\n      regularPolygons: polygons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default AeroMap;","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/components/MapArea/components/AeroMap.jsx"],"names":["React","Component","ResizableBox","ReactBingmaps","AeroMap","state","predBaseLat","predBaseLong","predNextLat","predNextLong","resetBase","predictNext","inLat","inLong","props","planeLat","planeLong","direction","velocity","setState","nextLat","nextLong","detectUpdate","render","mapLat","mapLong","targLat","targLng","zoom","drawPlane","smoothPlane","drawTarget","drawCDAPredictionPoint","drawPayloadPredictionPoint","drawPlanePositionHistory","payloadLat","payloadLong","cdaLat","cdaLong","planePositionHistory","polygons","polyline","location","option","strokeColor","strokeThickness","strokeDashArray","push","center","radius","points","fillColor","height","window","innerHeight","backgroundColor","width","overflow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { ResizableBox } from 'react-resizable';\r\nimport { ReactBingmaps } from 'react-bingmaps';\r\nimport \"../css/resize.css\";\r\n\r\nclass AeroMap extends Component {\r\n  state = {\r\n    predBaseLat: null,\r\n    predBaseLong: null,\r\n    predNextLat: null,\r\n    predNextLong: null,\r\n    resetBase: true,\r\n  };\r\n\r\n  predictNext = (inLat, inLong) => {\r\n    const { planeLat, planeLong, direction, velocity } = this.props;\r\n    const { resetBase } = this.state;\r\n    if (resetBase) {\r\n      this.setState({ predBaseLat: planeLat, predBaseLong: planeLong });\r\n      this.setState({ resetBase: false });\r\n    } else {\r\n      this.setState({ predBaseLat: inLat, predBaseLong: inLong });\r\n    }\r\n    const nextLat = this.state.predBaseLat + direction + velocity;\r\n    const nextLong = this.state.predBaseLong + direction + velocity;\r\n\r\n    this.setState({ predNextLat: nextLat, predNextLong: nextLong });\r\n  };\r\n\r\n  detectUpdate = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      planeLat,\r\n      planeLong,\r\n      mapLat,\r\n      mapLong,\r\n      targLat,\r\n      targLng,\r\n      zoom,\r\n      drawPlane,\r\n      smoothPlane,\r\n      drawTarget,\r\n      drawCDAPredictionPoint,\r\n      drawPayloadPredictionPoint,\r\n      drawPlanePositionHistory,\r\n      payloadLat,\r\n      payloadLong,\r\n      cdaLat,\r\n      cdaLong,\r\n      planePositionHistory,\r\n    } = this.props;\r\n\r\n    const { predNextLat, predNextLong } = this.state;\r\n\r\n    const polygons = [];\r\n\r\n    const polyline = {\r\n      location: drawPlanePositionHistory ? planePositionHistory : [],\r\n      option: {\r\n        strokeColor: \"rgba(255,255,255,0.7)\",\r\n        strokeThickness: 2.5,\r\n        strokeDashArray: [4, 4],\r\n      },\r\n    };\r\n\r\n    if (drawPlane) {\r\n      polygons.push({\r\n        center: [planeLat, planeLong],\r\n        radius: 0.002,\r\n        points: 20,\r\n        option: {\r\n          fillColor: \"rgba(230, 0, 0, 0.7)\",\r\n          strokeThickness: 2,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (smoothPlane) {\r\n      this.predictNext(this.state.predNextLat, this.state.predNextLong);\r\n      polygons.push({\r\n        center: [predNextLat, predNextLong],\r\n        radius: 0.002,\r\n        points: 20,\r\n        option: {\r\n          fillColor: \"rgba(255, 127, 80, 0.7)\",\r\n          strokeThickness: 2,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (drawTarget) {\r\n      polygons.push({\r\n        center: [targLat, targLng],\r\n        radius: 0.0094697, // 50 feet = 0.0094697 miles\r\n        points: 80,\r\n        option: {\r\n          strokeColor: \"#ff0000\",\r\n          fillColor: \"rgba(84, 209, 71, 0.7)\",\r\n          strokeThickness: 2,\r\n          strokeDashArray: [1, 2],\r\n        },\r\n      });\r\n    }\r\n\r\n    if (drawPayloadPredictionPoint) {\r\n      polygons.push({\r\n        center: [payloadLat, payloadLong], // paints predicted payload location on map in purple\r\n        radius: 0.001,\r\n        points: 80,\r\n        option: {\r\n          fillColor: \"rgba(104, 242, 233, 0.7)\",\r\n          strokeThickness: 1,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (drawCDAPredictionPoint) {\r\n      polygons.push({\r\n        center: [cdaLat, cdaLong], // paints predicted CDA Location on map in purple\r\n        radius: 0.001,\r\n        points: 80,\r\n        option: {\r\n          fillColor: \"rgba(251, 189, 8, 0.7)\",\r\n          strokeThickness: 1,\r\n        },\r\n      });\r\n    }\r\n\r\n\r\n    // let coordinates = [payloadLat, payloadLong],[cdaLat, cdaLong];\r\n    const height = window.innerHeight - 31;\r\n    return (\r\n      <div>\r\n        <ResizableBox\r\n          width={600}\r\n          height={height}\r\n          axis=\"x\"\r\n          handleSize={[20, 20]}\r\n          minConstraints={[100, height]}\r\n        >\r\n          <div style={{ backgroundColor: \"#999\", width: \"100%\", height: \"100%\", overflow: \"hidden\" }}>\r\n            <ReactBingmaps\r\n              bingmapKey=\"AszsKaHJ3M1aGYwWB85QjTHkpEs8wTow6nOYAzOMDxOCopJSupN6RLCPkbVR42jF\"\r\n              disableStreetside\r\n              center={[mapLat, mapLong]}\r\n              zoom={zoom}\r\n              polyline={polyline}\r\n              regularPolygons={polygons}\r\n            />\r\n          </div>\r\n        </ResizableBox>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AeroMap;\r\n"]},"metadata":{},"sourceType":"module"}