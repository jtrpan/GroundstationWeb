{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\GroundStation\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\n\nclass GroundStation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.dataLog = [];\n    this.planePositionHistory = [];\n    this.state = {\n      currentData: {}\n    };\n\n    this.clearDataLog = () => {\n      this.dataLog = [];\n    };\n\n    this.download = (filename, text) => {\n      const pom = document.createElement('a');\n      pom.setAttribute('href', \"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(text)));\n      pom.setAttribute('download', filename);\n\n      if (document.createEvent) {\n        const event = document.createEvent('MouseEvents');\n        event.initEvent('click', true, true);\n        pom.dispatchEvent(event);\n      } else {\n        pom.click();\n      }\n    };\n\n    this.saveDataLog = () => {\n      console.info(\"Saving\", this.dataLog.length, \"records\");\n      let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\" + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n      this.dataLog.forEach(d => {\n        csv = \"\".concat(csv, \"\\n\").concat(d.timeSent, \", \").concat(d.timeRecieved, \", \").concat(d.latitude, \", \").concat(d.longitude, \", \").concat(d.altitude, \", \").concat(d.velocity, \", \").concat(d.accuracy, \",             \").concat(d.payloadPredictionDistance, \",\").concat(d.payloadLatLong[0], \", \").concat(d.payloadLatLong[1], \",\").concat(d.CDAPredictionDistance, \",\").concat(d.cdaLatLong[0], \", \").concat(d.cdaLatLong[1]);\n      });\n      this.download(\"Flight Log \".concat(new Date().toISOString(), \".csv\"), csv);\n    };\n  }\n\n  render() {\n    const currentData = this.state.currentData;\n    return React.createElement(Tab.Pane, {\n      style: {\n        paddingLeft: 0,\n        paddingBottom: \"1em\",\n        border: \"none\",\n        height: \"100%\",\n        boxSizing: \"content-box\",\n        paddingRight: 0,\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        height: \"calc(100% - 2em)\",\n        overflow: \"hidden\",\n        overflowX: \"auto\",\n        paddingBottom: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(MapArea, {\n      currentData: currentData,\n      planePositionHistory: this.planePositionHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(DataArea, {\n      saveLog: this.saveDataLog,\n      clearLog: this.clearDataLog,\n      receiveData: this.receiveData,\n      currentData: currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(DropArea, {\n      currentData: currentData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GroundStation;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/GroundStation/index.jsx"],"names":["React","Component","Tab","MapArea","DataArea","DropArea","WebSocketManager","GroundStation","dataLog","planePositionHistory","state","currentData","clearDataLog","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","saveDataLog","console","info","length","csv","forEach","d","timeSent","timeRecieved","latitude","longitude","altitude","velocity","accuracy","payloadPredictionDistance","payloadLatLong","CDAPredictionDistance","cdaLatLong","Date","toISOString","render","paddingLeft","paddingBottom","border","height","boxSizing","paddingRight","maxWidth","display","overflow","overflowX","receiveData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\n\n\nclass GroundStation extends Component {\n  dataLog = [];\n\n  planePositionHistory = [];\n\n  state = {\n    currentData: {},\n  };\n\n  clearDataLog = () => {\n    this.dataLog = [];\n  };\n\n  download = (filename, text) => {\n    const pom = document.createElement('a');\n    pom.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`);\n    pom.setAttribute('download', filename);\n\n    if (document.createEvent) {\n      const event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n    } else {\n      pom.click();\n    }\n  };\n\n  saveDataLog = () => {\n    console.info(\"Saving\", this.dataLog.length, \"records\");\n    let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\"\n        + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n    this.dataLog.forEach((d) => {\n      csv = `${csv}\\n${d.timeSent}, ${d.timeRecieved}, ${d.latitude}, ${d.longitude}, ${d.altitude}, ${d.velocity}, ${d.accuracy}, \\\n            ${d.payloadPredictionDistance},${d.payloadLatLong[0]}, ${d.payloadLatLong[1]},${d.CDAPredictionDistance},${d.cdaLatLong[0]}, ${d.cdaLatLong[1]}`;\n    });\n\n    this.download(`Flight Log ${new Date().toISOString()}.csv`, csv);\n  };\n\n  render() {\n    const { currentData } = this.state;\n    return (\n        <Tab.Pane\n            style={{\n              paddingLeft: 0,\n              paddingBottom: \"1em\",\n              border: \"none\",\n              height: \"100%\",\n              boxSizing: \"content-box\",\n              paddingRight: 0,\n              maxWidth: \"100%\",\n            }}\n        >\n          <div style={{ display: \"flex\", height: \"calc(100% - 2em)\", overflow: \"hidden\", overflowX: \"auto\", paddingBottom: \"1em\" }}>\n            <MapArea currentData={currentData} planePositionHistory={this.planePositionHistory} />\n            <DataArea saveLog={this.saveDataLog} clearLog={this.clearDataLog} receiveData={this.receiveData} currentData={currentData} />\n            <DropArea currentData={currentData} />\n          </div>\n        </Tab.Pane>\n    );\n  }\n}\n\nexport default GroundStation;\n"]},"metadata":{},"sourceType":"module"}