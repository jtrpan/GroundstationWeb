{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Documents\\\\UBC\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\MapArea\\\\components\\\\AeroMap.jsx\";\nimport React, { Component } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport \"../css/resize.css\";\n\nclass AeroMap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      predLat: null,\n      predLong: null\n    };\n\n    this.predictNext = () => {\n      let nextLat = 0;\n      let nextLong = 0;\n      const _this$props = this.props,\n            planeLat = _this$props.planeLat,\n            planeLong = _this$props.planeLong,\n            direction = _this$props.direction,\n            velocity = _this$props.velocity;\n      nextLat = planeLat + velocity + direction;\n      nextLong = planeLong + velocity + direction;\n      this.setState({\n        predLat: nextLat,\n        predLong: nextLong\n      });\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          planeLat = _this$props2.planeLat,\n          planeLong = _this$props2.planeLong,\n          mapLat = _this$props2.mapLat,\n          mapLong = _this$props2.mapLong,\n          targLat = _this$props2.targLat,\n          targLng = _this$props2.targLng,\n          zoom = _this$props2.zoom,\n          drawPlane = _this$props2.drawPlane,\n          smoothPlane = _this$props2.smoothPlane,\n          drawTarget = _this$props2.drawTarget,\n          drawCDAPredictionPoint = _this$props2.drawCDAPredictionPoint,\n          drawPayloadPredictionPoint = _this$props2.drawPayloadPredictionPoint,\n          drawPlanePositionHistory = _this$props2.drawPlanePositionHistory,\n          payloadLat = _this$props2.payloadLat,\n          payloadLong = _this$props2.payloadLong,\n          cdaLat = _this$props2.cdaLat,\n          cdaLong = _this$props2.cdaLong,\n          planePositionHistory = _this$props2.planePositionHistory;\n    const _this$state = this.state,\n          predLat = _this$state.predLat,\n          predLong = _this$state.predLong;\n    const polygons = [];\n    const polyline = {\n      location: drawPlanePositionHistory ? planePositionHistory : [],\n      option: {\n        strokeColor: \"rgba(255,255,255,0.7)\",\n        strokeThickness: 2.5,\n        strokeDashArray: [4, 4]\n      }\n    };\n\n    if (drawPlane) {\n      polygons.push({\n        center: [planeLat, planeLong],\n        radius: 0.002,\n        points: 20,\n        option: {\n          fillColor: \"rgba(230, 0, 0, 0.7)\",\n          strokeThickness: 2\n        }\n      });\n    }\n\n    if (smoothPlane) {\n      polygons.push({\n        center: [predLat, predLong],\n        radius: 0.002,\n        points: 20,\n        option: {\n          fillColor: \"rgba(230, 0, 0, 0.7)\",\n          strokeThickness: 2\n        }\n      });\n    }\n\n    if (drawTarget) {\n      polygons.push({\n        center: [targLat, targLng],\n        radius: 0.0094697,\n        // 50 feet = 0.0094697 miles\n        points: 80,\n        option: {\n          strokeColor: \"#ff0000\",\n          fillColor: \"rgba(84, 209, 71, 0.7)\",\n          strokeThickness: 2,\n          strokeDashArray: [1, 2]\n        }\n      });\n    }\n\n    if (drawPayloadPredictionPoint) {\n      polygons.push({\n        center: [payloadLat, payloadLong],\n        // paints predicted payload location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"rgba(104, 242, 233, 0.7)\",\n          strokeThickness: 1\n        }\n      });\n    }\n\n    if (drawCDAPredictionPoint) {\n      polygons.push({\n        center: [cdaLat, cdaLong],\n        // paints predicted CDA Location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"rgba(251, 189, 8, 0.7)\",\n          strokeThickness: 1\n        }\n      });\n    } // let coordinates = [payloadLat, payloadLong],[cdaLat, cdaLong];\n\n\n    const height = window.innerHeight - 31;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(ResizableBox, {\n      width: 600,\n      height: height,\n      axis: \"x\",\n      handleSize: [20, 20],\n      minConstraints: [100, height],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"#999\",\n        width: \"100%\",\n        height: \"100%\",\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(ReactBingmaps, {\n      bingmapKey: \"AszsKaHJ3M1aGYwWB85QjTHkpEs8wTow6nOYAzOMDxOCopJSupN6RLCPkbVR42jF\",\n      disableStreetside: true,\n      center: [mapLat, mapLong],\n      zoom: zoom,\n      polyline: polyline,\n      regularPolygons: polygons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default AeroMap;","map":{"version":3,"sources":["C:/Users/James Pan/Documents/UBC/demo/groundstationweb/src/components/MapArea/components/AeroMap.jsx"],"names":["React","Component","ResizableBox","ReactBingmaps","AeroMap","state","predLat","predLong","predictNext","nextLat","nextLong","props","planeLat","planeLong","direction","velocity","setState","render","mapLat","mapLong","targLat","targLng","zoom","drawPlane","smoothPlane","drawTarget","drawCDAPredictionPoint","drawPayloadPredictionPoint","drawPlanePositionHistory","payloadLat","payloadLong","cdaLat","cdaLong","planePositionHistory","polygons","polyline","location","option","strokeColor","strokeThickness","strokeDashArray","push","center","radius","points","fillColor","height","window","innerHeight","backgroundColor","width","overflow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAO,mBAAP;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BI,KAD8B,GACtB;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADsB;;AAAA,SAM9BC,WAN8B,GAMhB,MAAM;AAClB,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,QAAQ,GAAG,CAAf;AAFkB,0BAGmC,KAAKC,KAHxC;AAAA,YAGVC,QAHU,eAGVA,QAHU;AAAA,YAGAC,SAHA,eAGAA,SAHA;AAAA,YAGWC,SAHX,eAGWA,SAHX;AAAA,YAGsBC,QAHtB,eAGsBA,QAHtB;AAKlBN,MAAAA,OAAO,GAAGG,QAAQ,GAAGG,QAAX,GAAsBD,SAAhC;AACAJ,MAAAA,QAAQ,GAAGG,SAAS,GAAGE,QAAZ,GAAuBD,SAAlC;AAEA,WAAKE,QAAL,CAAc;AAAEV,QAAAA,OAAO,EAAEG,OAAX;AAAoBF,QAAAA,QAAQ,EAAEG;AAA9B,OAAd;AACD,KAf6B;AAAA;;AAiB9BO,EAAAA,MAAM,GAAG;AAAA,yBAoBH,KAAKN,KApBF;AAAA,UAELC,QAFK,gBAELA,QAFK;AAAA,UAGLC,SAHK,gBAGLA,SAHK;AAAA,UAILK,MAJK,gBAILA,MAJK;AAAA,UAKLC,OALK,gBAKLA,OALK;AAAA,UAMLC,OANK,gBAMLA,OANK;AAAA,UAOLC,OAPK,gBAOLA,OAPK;AAAA,UAQLC,IARK,gBAQLA,IARK;AAAA,UASLC,SATK,gBASLA,SATK;AAAA,UAULC,WAVK,gBAULA,WAVK;AAAA,UAWLC,UAXK,gBAWLA,UAXK;AAAA,UAYLC,sBAZK,gBAYLA,sBAZK;AAAA,UAaLC,0BAbK,gBAaLA,0BAbK;AAAA,UAcLC,wBAdK,gBAcLA,wBAdK;AAAA,UAeLC,UAfK,gBAeLA,UAfK;AAAA,UAgBLC,WAhBK,gBAgBLA,WAhBK;AAAA,UAiBLC,MAjBK,gBAiBLA,MAjBK;AAAA,UAkBLC,OAlBK,gBAkBLA,OAlBK;AAAA,UAmBLC,oBAnBK,gBAmBLA,oBAnBK;AAAA,wBAsBuB,KAAK5B,KAtB5B;AAAA,UAsBCC,OAtBD,eAsBCA,OAtBD;AAAA,UAsBUC,QAtBV,eAsBUA,QAtBV;AAwBP,UAAM2B,QAAQ,GAAG,EAAjB;AAEA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,QAAQ,EAAER,wBAAwB,GAAGK,oBAAH,GAA0B,EAD7C;AAEfI,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE,uBADP;AAENC,QAAAA,eAAe,EAAE,GAFX;AAGNC,QAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ;AAHX;AAFO,KAAjB;;AASA,QAAIjB,SAAJ,EAAe;AACbW,MAAAA,QAAQ,CAACO,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAAC9B,QAAD,EAAWC,SAAX,CADI;AAEZ8B,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZP,QAAAA,MAAM,EAAE;AACNQ,UAAAA,SAAS,EAAE,sBADL;AAENN,UAAAA,eAAe,EAAE;AAFX;AAJI,OAAd;AASD;;AAED,QAAIf,WAAJ,EAAiB;AACfU,MAAAA,QAAQ,CAACO,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACpC,OAAD,EAAUC,QAAV,CADI;AAEZoC,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZP,QAAAA,MAAM,EAAE;AACNQ,UAAAA,SAAS,EAAE,sBADL;AAENN,UAAAA,eAAe,EAAE;AAFX;AAJI,OAAd;AASD;;AAED,QAAId,UAAJ,EAAgB;AACdS,MAAAA,QAAQ,CAACO,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACtB,OAAD,EAAUC,OAAV,CADI;AAEZsB,QAAAA,MAAM,EAAE,SAFI;AAEO;AACnBC,QAAAA,MAAM,EAAE,EAHI;AAIZP,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE,SADP;AAENO,UAAAA,SAAS,EAAE,wBAFL;AAGNN,UAAAA,eAAe,EAAE,CAHX;AAINC,UAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ;AAJX;AAJI,OAAd;AAWD;;AAED,QAAIb,0BAAJ,EAAgC;AAC9BO,MAAAA,QAAQ,CAACO,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACb,UAAD,EAAaC,WAAb,CADI;AACuB;AACnCa,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZP,QAAAA,MAAM,EAAE;AACNQ,UAAAA,SAAS,EAAE,0BADL;AAENN,UAAAA,eAAe,EAAE;AAFX;AAJI,OAAd;AASD;;AAED,QAAIb,sBAAJ,EAA4B;AAC1BQ,MAAAA,QAAQ,CAACO,IAAT,CAAc;AACZC,QAAAA,MAAM,EAAE,CAACX,MAAD,EAASC,OAAT,CADI;AACe;AAC3BW,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,MAAM,EAAE,EAHI;AAIZP,QAAAA,MAAM,EAAE;AACNQ,UAAAA,SAAS,EAAE,wBADL;AAENN,UAAAA,eAAe,EAAE;AAFX;AAJI,OAAd;AASD,KA/FM,CAkGP;;;AACA,UAAMO,MAAM,GAAGC,MAAM,CAACC,WAAP,GAAqB,EAApC;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAEF,MAFV;AAGE,MAAA,IAAI,EAAC,GAHP;AAIE,MAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,CAJd;AAKE,MAAA,cAAc,EAAE,CAAC,GAAD,EAAMA,MAAN,CALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAK,MAAA,KAAK,EAAE;AAAEG,QAAAA,eAAe,EAAE,MAAnB;AAA2BC,QAAAA,KAAK,EAAE,MAAlC;AAA0CJ,QAAAA,MAAM,EAAE,MAAlD;AAA0DK,QAAAA,QAAQ,EAAE;AAApE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AACE,MAAA,UAAU,EAAC,kEADb;AAEE,MAAA,iBAAiB,MAFnB;AAGE,MAAA,MAAM,EAAE,CAACjC,MAAD,EAASC,OAAT,CAHV;AAIE,MAAA,IAAI,EAAEG,IAJR;AAKE,MAAA,QAAQ,EAAEa,QALZ;AAME,MAAA,eAAe,EAAED,QANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,CADF,CADF;AAsBD;;AA3I6B;;AA8IhC,eAAe9B,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { ReactBingmaps } from 'react-bingmaps';\nimport \"../css/resize.css\";\n\nclass AeroMap extends Component {\n  state = {\n    predLat: null,\n    predLong: null,\n  };\n\n  predictNext = () => {\n    let nextLat = 0;\n    let nextLong = 0;\n    const { planeLat, planeLong, direction, velocity } = this.props;\n\n    nextLat = planeLat + velocity + direction;\n    nextLong = planeLong + velocity + direction;\n\n    this.setState({ predLat: nextLat, predLong: nextLong });\n  };\n\n  render() {\n    const {\n      planeLat,\n      planeLong,\n      mapLat,\n      mapLong,\n      targLat,\n      targLng,\n      zoom,\n      drawPlane,\n      smoothPlane,\n      drawTarget,\n      drawCDAPredictionPoint,\n      drawPayloadPredictionPoint,\n      drawPlanePositionHistory,\n      payloadLat,\n      payloadLong,\n      cdaLat,\n      cdaLong,\n      planePositionHistory,\n    } = this.props;\n\n    const { predLat, predLong } = this.state;\n\n    const polygons = [];\n\n    const polyline = {\n      location: drawPlanePositionHistory ? planePositionHistory : [],\n      option: {\n        strokeColor: \"rgba(255,255,255,0.7)\",\n        strokeThickness: 2.5,\n        strokeDashArray: [4, 4],\n      },\n    };\n\n    if (drawPlane) {\n      polygons.push({\n        center: [planeLat, planeLong],\n        radius: 0.002,\n        points: 20,\n        option: {\n          fillColor: \"rgba(230, 0, 0, 0.7)\",\n          strokeThickness: 2,\n        },\n      });\n    }\n\n    if (smoothPlane) {\n      polygons.push({\n        center: [predLat, predLong],\n        radius: 0.002,\n        points: 20,\n        option: {\n          fillColor: \"rgba(230, 0, 0, 0.7)\",\n          strokeThickness: 2,\n        },\n      });\n    }\n\n    if (drawTarget) {\n      polygons.push({\n        center: [targLat, targLng],\n        radius: 0.0094697, // 50 feet = 0.0094697 miles\n        points: 80,\n        option: {\n          strokeColor: \"#ff0000\",\n          fillColor: \"rgba(84, 209, 71, 0.7)\",\n          strokeThickness: 2,\n          strokeDashArray: [1, 2],\n        },\n      });\n    }\n\n    if (drawPayloadPredictionPoint) {\n      polygons.push({\n        center: [payloadLat, payloadLong], // paints predicted payload location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"rgba(104, 242, 233, 0.7)\",\n          strokeThickness: 1,\n        },\n      });\n    }\n\n    if (drawCDAPredictionPoint) {\n      polygons.push({\n        center: [cdaLat, cdaLong], // paints predicted CDA Location on map in purple\n        radius: 0.001,\n        points: 80,\n        option: {\n          fillColor: \"rgba(251, 189, 8, 0.7)\",\n          strokeThickness: 1,\n        },\n      });\n    }\n\n\n    // let coordinates = [payloadLat, payloadLong],[cdaLat, cdaLong];\n    const height = window.innerHeight - 31;\n    return (\n      <div>\n        <ResizableBox\n          width={600}\n          height={height}\n          axis=\"x\"\n          handleSize={[20, 20]}\n          minConstraints={[100, height]}\n        >\n          <div style={{ backgroundColor: \"#999\", width: \"100%\", height: \"100%\", overflow: \"hidden\" }}>\n            <ReactBingmaps\n              bingmapKey=\"AszsKaHJ3M1aGYwWB85QjTHkpEs8wTow6nOYAzOMDxOCopJSupN6RLCPkbVR42jF\"\n              disableStreetside\n              center={[mapLat, mapLong]}\n              zoom={zoom}\n              polyline={polyline}\n              regularPolygons={polygons}\n            />\n          </div>\n        </ResizableBox>\n      </div>\n    );\n  }\n}\n\nexport default AeroMap;\n"]},"metadata":{},"sourceType":"module"}