{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\CommunicationArea\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; //?????\n\nconst server = remoteServer;\n\nclass CommunicationArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false\n    };\n\n    this.recievedData = data => {\n      console.log(\"Recieved:\", data);\n      this.props.recieveData(data);\n    };\n\n    this.connect = () => {\n      console.log(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.setState({\n          connected: true\n        });\n        console.log(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.log(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.recievedData(e.data);\n      };\n\n      connection.onclose = () => {\n        this.setState({\n          connected: false\n        });\n        console.log(\"Disconnected from server\");\n      };\n\n      this.connection = connection;\n    };\n\n    this.sendData = () => {\n      const connected = this.state.connected;\n\n      if (!connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3\n        }\n      });\n      console.log(\"Sending:\", data);\n      this.connection.send(data);\n    };\n\n    this.connect();\n  }\n\n  render() {\n    const connected = this.state.connected;\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h5\",\n      style: {\n        marginBottom: \"0px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Communication:\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Connection status:\\xA0\", connected ? React.createElement(\"strong\", {\n      style: {\n        color: \"limegreen\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Connected\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      style: {\n        color: \"firebrick\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Not Connected\"), \"\\xA0\", React.createElement(Icon, {\n      link: true,\n      name: \"sync\",\n      onClick: this.connect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), React.createElement(Button, {\n      compact: true,\n      basic: true,\n      onClick: this.sendData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Send  Test Data\"));\n  }\n\n}\n\nexport default CommunicationArea;","map":{"version":3,"sources":["C:\\Users\\James Pan\\Desktop\\demo\\groundstationweb\\src\\components\\CommunicationArea\\index.js"],"names":["React","Component","Segment","Header","Icon","Button","localServer","remoteServer","server","CommunicationArea","constructor","props","state","connected","recievedData","data","console","log","recieveData","connect","connection","WebSocket","onopen","setState","onerror","error","onmessage","e","onclose","sendData","warn","JSON","stringify","type","flightData","latitude","Math","random","longitude","altitude","velocity","send","render","marginBottom","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\r\n\r\nconst localServer = \"ws://localhost:8888\";\r\nconst remoteServer = \"ws://104.248.73.89:8888\";//?????\r\nconst server = remoteServer;\r\n\r\nclass CommunicationArea extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.connect()\r\n    };\r\n\r\n\r\n    state = {\r\n        connected: false,\r\n    };\r\n\r\n    recievedData = (data) => {\r\n        console.log(\"Recieved:\", data);\r\n        this.props.recieveData(data);\r\n    };\r\n\r\n    connect = () => {\r\n        console.log(\"Connecting....\");\r\n        const connection = new WebSocket(server);\r\n        connection.onopen = () => {\r\n            this.setState({ connected: true });\r\n            console.log(\"Connected to server\");\r\n        };\r\n        connection.onerror = (error) => {\r\n            console.log(\"Connection error\",error);\r\n        };\r\n        connection.onmessage = (e) => {\r\n            this.recievedData(e.data);\r\n        };\r\n        connection.onclose = () => {\r\n            this.setState({ connected: false });\r\n            console.log(\"Disconnected from server\");\r\n        };\r\n        this.connection = connection;\r\n    };\r\n\r\n    sendData = () => {\r\n        const { connected } = this.state;\r\n        if (!connected){\r\n            console.warn(\"Cannot send. Not connected\");\r\n            return;\r\n        }\r\n        const data = JSON.stringify({type: \"data\", flightData: { latitude: 49.258063+Math.random()*0.00111, longitude: -123.195911+Math.random()*0.00111, altitude: 45.3, velocity: 10.3}});\r\n\r\n\r\n        console.log(\"Sending:\", data);\r\n        this.connection.send(data);\r\n    };\r\n\r\n    render(){\r\n        const { connected } = this.state;\r\n        return (\r\n            <Segment>\r\n                <Header as=\"h5\" style={{ marginBottom: \"0px\" }}>Communication:</Header>\r\n                <div>\r\n                    Connection status:&nbsp;\r\n                    {connected ? (\r\n                            <strong style={{ color: \"limegreen\" }}>Connected</strong>\r\n                        ): (\r\n                            <span>\r\n                                <strong style={{ color: \"firebrick\" }}>Not Connected</strong>\r\n                                &nbsp;\r\n                                <Icon link name=\"sync\" onClick={this.connect} />\r\n                            </span>\r\n\r\n                        )}\r\n                </div>\r\n                <Button compact basic onClick={this.sendData}>Send  Test Data</Button>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommunicationArea;\r\n\r\n"]},"metadata":{},"sourceType":"module"}