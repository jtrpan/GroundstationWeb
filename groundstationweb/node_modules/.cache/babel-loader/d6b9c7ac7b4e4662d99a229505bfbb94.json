{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Pan\\\\Desktop\\\\demo\\\\groundstationweb\\\\src\\\\components\\\\GroundStation\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\nimport { predictCDA, predictPayload } from \"../../helpers/predictions\";\nimport { getDirection } from \"../../helpers/direction\";\nimport { predictLoc } from \"../../helpers/location\";\n\nclass GroundStation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentData: {},\n      dataLog: [],\n      planePositionHistory: [],\n      oldDirection: 0\n    };\n    this.lastPacketTime = 0;\n\n    this.setData = rawData => {\n      const data = JSON.parse(rawData);\n      const time = +Date.now();\n      const timeElapsed = time - this.state.lastPacketTime;\n      const currentData = this.state.currentData;\n      data.timeElapsed = timeElapsed;\n      this.state.lastPacketTime = time;\n\n      if (data.flightData) {\n        data.flightData.timeRecieved = time / 1000 || 0;\n        data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n        data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n\n        if (data.flightData.direction === 0) {\n          data.flightData.direction = this.state.oldDirection;\n        }\n\n        data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n        data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n        this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n        this.dataLog.push(data.flightData);\n        this.setState({\n          currentData: data\n        });\n        this.state.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n        this.state.log.push(data.flightData);\n        this.setState({\n          currentData: data,\n          oldDirection: data.flightData.direction\n        });\n      }\n    };\n\n    this.setConnected = isConnected => {\n      this.setState({\n        isConnected\n      });\n    };\n\n    this.getConnected = () => {\n      return this.state.isConnected;\n    };\n\n    this.webSocketManager = new WebSocketManager(this.setData, this.setConnected, this.getConnected);\n\n    this.clearDataLog = () => {\n      this.dataLog = [];\n    };\n\n    this.download = (filename, text) => {\n      const pom = document.createElement('a');\n      pom.setAttribute('href', \"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(text)));\n      pom.setAttribute('download', filename);\n\n      if (document.createEvent) {\n        const event = document.createEvent('MouseEvents');\n        event.initEvent('click', true, true);\n        pom.dispatchEvent(event);\n      } else {\n        pom.click();\n      }\n    };\n\n    this.saveDataLog = () => {\n      console.info(\"Saving\", this.dataLog.length, \"records\");\n      let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\" + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n      this.dataLog.forEach(d => {\n        csv = \"\".concat(csv, \"\\n\").concat(d.timeSent, \", \").concat(d.timeRecieved, \", \").concat(d.latitude, \", \").concat(d.longitude, \", \").concat(d.altitude, \", \").concat(d.velocity, \", \").concat(d.accuracy, \",             \").concat(d.payloadPredictionDistance, \",\").concat(d.payloadLatLong[0], \", \").concat(d.payloadLatLong[1], \",\").concat(d.CDAPredictionDistance, \",\").concat(d.cdaLatLong[0], \", \").concat(d.cdaLatLong[1]);\n      });\n      this.download(\"Flight Log \".concat(new Date().toISOString(), \".csv\"), csv);\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          currentData = _this$state.currentData,\n          isConnected = _this$state.isConnected;\n    return React.createElement(Tab.Pane, {\n      style: {\n        paddingLeft: 0,\n        paddingBottom: \"1em\",\n        border: \"none\",\n        height: \"100%\",\n        boxSizing: \"content-box\",\n        paddingRight: 0,\n        maxWidth: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        height: \"calc(100% - 2em)\",\n        overflow: \"hidden\",\n        overflowX: \"auto\",\n        paddingBottom: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(MapArea, {\n      currentData: currentData,\n      planePositionHistory: this.planePositionHistory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(DataArea, {\n      saveLog: this.saveDataLog,\n      clearLog: this.clearDataLog,\n      receiveData: this.receiveData,\n      currentData: currentData,\n      webSocketManager: this.webSocketManager,\n      isConnected: isConnected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(DropArea, {\n      currentData: currentData,\n      webSocketManager: this.webSocketManager,\n      isConnected: isConnected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GroundStation;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/components/GroundStation/index.jsx"],"names":["React","Component","Tab","MapArea","DataArea","DropArea","WebSocketManager","predictCDA","predictPayload","getDirection","predictLoc","GroundStation","state","currentData","dataLog","planePositionHistory","oldDirection","lastPacketTime","setData","rawData","data","JSON","parse","time","Date","now","timeElapsed","flightData","timeRecieved","payloadPredictionDistance","altitude","velocity","headwind","CDAPredictionDistance","direction","payloadLatLong","cdaLatLong","push","latitude","longitude","setState","log","setConnected","isConnected","getConnected","webSocketManager","clearDataLog","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","saveDataLog","console","info","length","csv","forEach","d","timeSent","accuracy","toISOString","render","paddingLeft","paddingBottom","border","height","boxSizing","paddingRight","maxWidth","display","overflow","overflowX","receiveData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tab } from \"semantic-ui-react\";\nimport \"../MapArea/css/resize.css\";\nimport MapArea from \"../MapArea\";\nimport DataArea from \"../DataArea\";\nimport DropArea from \"../DropArea\";\nimport WebSocketManager from \"../../helpers/WebSocketManager\";\nimport { predictCDA, predictPayload } from \"../../helpers/predictions\";\nimport { getDirection } from \"../../helpers/direction\";\nimport { predictLoc } from \"../../helpers/location\";\n\nclass GroundStation extends Component {\n  state = {\n    currentData: {},\n    dataLog: [],\n    planePositionHistory: [],\n    oldDirection: 0,\n  };\n\n  lastPacketTime = 0;\n\n\n\n  setData = (rawData) => {\n    const data = JSON.parse(rawData);\n    const time = +Date.now();\n    const timeElapsed = time - this.state.lastPacketTime;\n    const { currentData } = this.state;\n    data.timeElapsed = timeElapsed;\n    this.state.lastPacketTime = time;\n    if (data.flightData) {\n      data.flightData.timeRecieved = (time / 1000) || 0;\n\n      data.flightData.payloadPredictionDistance = predictPayload(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n      data.flightData.CDAPredictionDistance = predictCDA(data.flightData.altitude, data.flightData.velocity, data.flightData.headwind);\n\n      data.flightData.direction = getDirection(currentData.flightData, data.flightData);\n\n      if (data.flightData.direction === 0) {\n        data.flightData.direction = this.state.oldDirection;\n      }\n\n      data.flightData.payloadLatLong = predictLoc(data.flightData, data.flightData.payloadPredictionDistance);\n      data.flightData.cdaLatLong = predictLoc(data.flightData, data.flightData.CDAPredictionDistance);\n\n      this.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n      this.dataLog.push(data.flightData);\n      this.setState({ currentData: data });\n      this.state.planePositionHistory.push([data.flightData.latitude, data.flightData.longitude]);\n      this.state.log.push(data.flightData);\n\n      this.setState({ currentData: data, oldDirection: data.flightData.direction });\n    }\n  }\n\n  setConnected = (isConnected) => {\n    this.setState({ isConnected });\n  }\n\n  getConnected = () => {\n    return this.state.isConnected;\n  }\n\n  webSocketManager = new WebSocketManager(this.setData, this.setConnected, this.getConnected);\n\n  clearDataLog = () => {\n    this.dataLog = [];\n  };\n\n  download = (filename, text) => {\n    const pom = document.createElement('a');\n    pom.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`);\n    pom.setAttribute('download', filename);\n\n    if (document.createEvent) {\n      const event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n    } else {\n      pom.click();\n    }\n  };\n\n  saveDataLog = () => {\n    console.info(\"Saving\", this.dataLog.length, \"records\");\n    let csv = \"TimeSent, TimeRecieved, Latitude, Longitude, GPS Altitude (ft), Velocity (m/s), GPS Accuracy,\"\n        + \"Payload Prediction (ft), Payload Target Lat, Payload Target Long, CDA Prediction (ft), CDA Target Lat, CDA Target Long\";\n    this.dataLog.forEach((d) => {\n      csv = `${csv}\\n${d.timeSent}, ${d.timeRecieved}, ${d.latitude}, ${d.longitude}, ${d.altitude}, ${d.velocity}, ${d.accuracy}, \\\n            ${d.payloadPredictionDistance},${d.payloadLatLong[0]}, ${d.payloadLatLong[1]},${d.CDAPredictionDistance},${d.cdaLatLong[0]}, ${d.cdaLatLong[1]}`;\n    });\n\n    this.download(`Flight Log ${new Date().toISOString()}.csv`, csv);\n  };\n\n  render() {\n    const { currentData, isConnected } = this.state;\n    return (\n      <Tab.Pane\n        style={{\n          paddingLeft: 0,\n          paddingBottom: \"1em\",\n          border: \"none\",\n          height: \"100%\",\n          boxSizing: \"content-box\",\n          paddingRight: 0,\n          maxWidth: \"100%\",\n        }}\n      >\n        <div style={{ display: \"flex\", height: \"calc(100% - 2em)\", overflow: \"hidden\", overflowX: \"auto\", paddingBottom: \"1em\" }}>\n          <MapArea currentData={currentData} planePositionHistory={this.planePositionHistory} />\n          <DataArea\n            saveLog={this.saveDataLog}\n            clearLog={this.clearDataLog}\n            receiveData={this.receiveData}\n            currentData={currentData}\n            webSocketManager={this.webSocketManager}\n            isConnected={isConnected}\n          />\n          <DropArea currentData={currentData} webSocketManager={this.webSocketManager} isConnected={isConnected} />\n        </div>\n      </Tab.Pane>\n    );\n  }\n}\n\nexport default GroundStation;\n"]},"metadata":{},"sourceType":"module"}