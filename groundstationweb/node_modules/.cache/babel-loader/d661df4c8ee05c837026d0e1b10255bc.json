{"ast":null,"code":"const localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\"; // ?????\n\nconst server = remoteServer;\n\nclass WebSocketManager {\n  constructor(setData, getData) {\n    this.connected = false;\n    this.lastPacketTime = null;\n\n    this.connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.connected = true;\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = error => {\n        console.error(\"Socket encountered error: \", error.message, \"Closing socket\");\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n\n      connection.onmessage = e => {\n        this.receiveData(e.data);\n      };\n\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n    this.receiveData = rawData => {\n      this.setData(rawData);\n    };\n\n    this.testData = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n\n      const data = JSON.stringify({\n        type: \"data\",\n        flightData: {\n          latitude: 49.258063 + Math.random() * 0.00111,\n          longitude: -123.195911 + Math.random() * 0.00111,\n          altitude: 45.3,\n          velocity: 10.3,\n          headwind: -0.9\n        }\n      });\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    this.ping = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        action: {// ping\n        }\n      });\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n    this.release = identity => {\n      if (!this.connected) {\n        console.warn(\"Cannot drop. Not connected\");\n        return;\n      }\n\n      const message = JSON.stringify({\n        type: \"action\",\n        action: {\n          // drop details\n          object: identity\n        }\n      });\n      console.info(\"Sending drop signal:\", message);\n      this.connection.send(message);\n    };\n\n    this.setData = setData;\n    this.connect();\n  }\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n\n\n}\n\nexport default WebSocketManager;","map":{"version":3,"sources":["C:/Users/James Pan/Desktop/demo/groundstationweb/src/helpers/WebSocketManager.js"],"names":["localServer","remoteServer","server","WebSocketManager","constructor","setData","getData","connected","lastPacketTime","connect","console","info","connection","WebSocket","onopen","onerror","error","message","close","onmessage","e","receiveData","data","onclose","rawData","testData","warn","JSON","stringify","type","flightData","latitude","Math","random","longitude","altitude","velocity","headwind","send","ping","action","release","identity","object"],"mappings":"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","sourcesContent":["\nconst localServer = \"ws://localhost:8888\";\nconst remoteServer = \"ws://104.248.73.89:8888\";// ?????\nconst server = remoteServer;\n\nclass WebSocketManager {\n  constructor(setData, getData) {\n    this.setData = setData;\n    this.connect();\n  }\n\n   connected = false;\n\n   lastPacketTime = null;\n\n    connect = () => {\n      console.info(\"Connecting....\");\n      const connection = new WebSocket(server);\n\n      connection.onopen = () => {\n        this.connected = true;\n        console.info(\"Connected to server\");\n      };\n\n      connection.onerror = (error) => {\n        console.error(\n          \"Socket encountered error: \",\n          error.message,\n          \"Closing socket\",\n        );\n        connection.close();\n        console.info(\"Connection error\", error);\n      };\n      connection.onmessage = (e) => {\n        this.receiveData(e.data);\n      };\n      connection.onclose = () => {\n        console.info(\"Disconnected from server\");\n      };\n    };\n\n  receiveData = (rawData) => {\n    this.setData(rawData);\n  };\n\n    testData = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot send. Not connected\");\n        return;\n      }\n      const data = JSON.stringify(\n        {\n          type: \"data\",\n          flightData: {\n            latitude: 49.258063+Math.random()*0.00111,\n            longitude: -123.195911+Math.random()*0.00111,\n            altitude: 45.3,\n            velocity: 10.3,\n            headwind: -0.9,\n          },\n        },\n      );\n      console.info(\"Sending test data:\", data);\n      this.connection.send(data);\n    };\n\n    ping = () => {\n      if (!this.connected) {\n        console.warn(\"Cannot ping. Not connected\");\n        return;\n      }\n      const message = JSON.stringify(\n        {\n          type: \"action\",\n          action: {\n            // ping\n          },\n        },\n      );\n      console.info(\"Pinging:\", message);\n      this.connection.send(message);\n    };\n\n  release = (identity) => {\n    if (!this.connected) {\n      console.warn(\"Cannot drop. Not connected\");\n      return;\n    }\n    const message = JSON.stringify(\n      {\n        type: \"action\",\n        action: {\n          // drop details\n          object: identity,\n        },\n      },\n    );\n    console.info(\"Sending drop signal:\", message);\n    this.connection.send(message);\n  };\n\n  /*\n    check = () => {\n      const { connection } = this.state;\n      if (!connection || connection.readyState == WebSocket.CLOSED) this.connect();\n    };\n    */\n}\nexport default WebSocketManager;\n"]},"metadata":{},"sourceType":"module"}